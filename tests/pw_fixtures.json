{"patches/?since=2020-10-01T00:00:00&state=1&archived=False&project=399&delegate=121173&": [{"id": 11823019, "url": "https://patchwork.kernel.org/api/1.1/patches/11823019/", "web_url": "https://patchwork.kernel.org/patch/11823019/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<160216614239.882446.4447190431655011838.stgit@firesoul>", "date": "2020-10-08T14:09:02", "name": "[bpf-next,V3,1/6] bpf: Remove MTU check in __bpf_skb_max_len", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "e03da582d6c8988d5777c7f4c9f6f1144b44fb31", "submitter": {"id": 58441, "url": "https://patchwork.kernel.org/api/1.1/people/58441/", "name": "Jesper Dangaard Brouer", "email": "brouer@redhat.com"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11823019/mbox/", "series": [{"id": 361485, "url": "https://patchwork.kernel.org/api/1.1/series/361485/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361485", "date": "2020-10-08T14:08:57", "name": "bpf: New approach for BPF MTU handling", "version": 3, "mbox": "https://patchwork.kernel.org/series/361485/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11823019/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11823019/checks/", "tags": {}}, {"id": 11823021, "url": "https://patchwork.kernel.org/api/1.1/patches/11823021/", "web_url": "https://patchwork.kernel.org/patch/11823021/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<160216614748.882446.6805410687451779968.stgit@firesoul>", "date": "2020-10-08T14:09:07", "name": "[bpf-next,V3,2/6] bpf: bpf_fib_lookup return MTU value as output when looked up", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "2e4f46d108369f82c59e4226736965a0b3ff5d79", "submitter": {"id": 58441, "url": "https://patchwork.kernel.org/api/1.1/people/58441/", "name": "Jesper Dangaard Brouer", "email": "brouer@redhat.com"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11823021/mbox/", "series": [{"id": 361485, "url": "https://patchwork.kernel.org/api/1.1/series/361485/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361485", "date": "2020-10-08T14:08:57", "name": "bpf: New approach for BPF MTU handling", "version": 3, "mbox": "https://patchwork.kernel.org/series/361485/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11823021/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11823021/checks/", "tags": {}}, {"id": 11823023, "url": "https://patchwork.kernel.org/api/1.1/patches/11823023/", "web_url": "https://patchwork.kernel.org/patch/11823023/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<160216615258.882446.12640007391672866038.stgit@firesoul>", "date": "2020-10-08T14:09:12", "name": "[bpf-next,V3,3/6] bpf: add BPF-helper for MTU checking", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "9ae16fe36265a9ab56838df02c4923db7864e4aa", "submitter": {"id": 58441, "url": "https://patchwork.kernel.org/api/1.1/people/58441/", "name": "Jesper Dangaard Brouer", "email": "brouer@redhat.com"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11823023/mbox/", "series": [{"id": 361485, "url": "https://patchwork.kernel.org/api/1.1/series/361485/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361485", "date": "2020-10-08T14:08:57", "name": "bpf: New approach for BPF MTU handling", "version": 3, "mbox": "https://patchwork.kernel.org/series/361485/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11823023/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11823023/checks/", "tags": {}}, {"id": 11823025, "url": "https://patchwork.kernel.org/api/1.1/patches/11823025/", "web_url": "https://patchwork.kernel.org/patch/11823025/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<160216615767.882446.7384364280837100311.stgit@firesoul>", "date": "2020-10-08T14:09:17", "name": "[bpf-next,V3,4/6] bpf: make it possible to identify BPF redirected SKBs", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "3a64f160602b5c44de8359c96a34f976a8e0b00a", "submitter": {"id": 58441, "url": "https://patchwork.kernel.org/api/1.1/people/58441/", "name": "Jesper Dangaard Brouer", "email": "brouer@redhat.com"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11823025/mbox/", "series": [{"id": 361485, "url": "https://patchwork.kernel.org/api/1.1/series/361485/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361485", "date": "2020-10-08T14:08:57", "name": "bpf: New approach for BPF MTU handling", "version": 3, "mbox": "https://patchwork.kernel.org/series/361485/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11823025/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11823025/checks/", "tags": {}}, {"id": 11823027, "url": "https://patchwork.kernel.org/api/1.1/patches/11823027/", "web_url": "https://patchwork.kernel.org/patch/11823027/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<160216616785.882446.3058399056188507434.stgit@firesoul>", "date": "2020-10-08T14:09:27", "name": "[bpf-next,V3,6/6] net: inline and splitup is_skb_forwardable", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "67e18d197cde8bcef64c04c24b2496ab85ca6f51", "submitter": {"id": 58441, "url": "https://patchwork.kernel.org/api/1.1/people/58441/", "name": "Jesper Dangaard Brouer", "email": "brouer@redhat.com"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11823027/mbox/", "series": [{"id": 361485, "url": "https://patchwork.kernel.org/api/1.1/series/361485/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361485", "date": "2020-10-08T14:08:57", "name": "bpf: New approach for BPF MTU handling", "version": 3, "mbox": "https://patchwork.kernel.org/series/361485/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11823027/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11823027/checks/", "tags": {}}, {"id": 11823029, "url": "https://patchwork.kernel.org/api/1.1/patches/11823029/", "web_url": "https://patchwork.kernel.org/patch/11823029/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<160216616276.882446.17894852306425732310.stgit@firesoul>", "date": "2020-10-08T14:09:22", "name": "[bpf-next,V3,5/6] bpf: drop MTU check when doing TC-BPF redirect to ingress", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "1bd953d37f5d585ee8db1f2ffe6f54ccad075815", "submitter": {"id": 58441, "url": "https://patchwork.kernel.org/api/1.1/people/58441/", "name": "Jesper Dangaard Brouer", "email": "brouer@redhat.com"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11823029/mbox/", "series": [{"id": 361485, "url": "https://patchwork.kernel.org/api/1.1/series/361485/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361485", "date": "2020-10-08T14:08:57", "name": "bpf: New approach for BPF MTU handling", "version": 3, "mbox": "https://patchwork.kernel.org/series/361485/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11823029/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11823029/checks/", "tags": {}}, {"id": 11823049, "url": "https://patchwork.kernel.org/api/1.1/patches/11823049/", "web_url": "https://patchwork.kernel.org/patch/11823049/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<1602166338-21378-1-git-send-email-magnus.karlsson@gmail.com>", "date": "2020-10-08T14:12:18", "name": "[bpf-next] xsk: introduce padding between ring pointers", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "ff707b970d379f743b1c2ccbcf0e1cf2a8f9526c", "submitter": {"id": 187703, "url": "https://patchwork.kernel.org/api/1.1/people/187703/", "name": "Magnus Karlsson", "email": "magnus.karlsson@gmail.com"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11823049/mbox/", "series": [{"id": 361491, "url": "https://patchwork.kernel.org/api/1.1/series/361491/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361491", "date": "2020-10-08T14:12:18", "name": "[bpf-next] xsk: introduce padding between ring pointers", "version": 1, "mbox": "https://patchwork.kernel.org/series/361491/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11823049/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11823049/checks/", "tags": {}}, {"id": 11823135, "url": "https://patchwork.kernel.org/api/1.1/patches/11823135/", "web_url": "https://patchwork.kernel.org/patch/11823135/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<20201008145314.116800-1-toke@redhat.com>", "date": "2020-10-08T14:53:14", "name": "[bpf-next] bpf_fib_lookup: return target ifindex even if neighbour lookup fails", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "03475c7e9fe63b41461ac98ce27c266215ac94d3", "submitter": {"id": 184429, "url": "https://patchwork.kernel.org/api/1.1/people/184429/", "name": "Toke H\u00f8iland-J\u00f8rgensen", "email": "toke@redhat.com"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11823135/mbox/", "series": [{"id": 361531, "url": "https://patchwork.kernel.org/api/1.1/series/361531/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361531", "date": "2020-10-08T14:53:14", "name": "[bpf-next] bpf_fib_lookup: return target ifindex even if neighbour lookup fails", "version": 1, "mbox": "https://patchwork.kernel.org/series/361531/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11823135/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11823135/checks/", "tags": {}}, {"id": 11824609, "url": "https://patchwork.kernel.org/api/1.1/patches/11824609/", "web_url": "https://patchwork.kernel.org/patch/11824609/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<20201008213148.26848-2-daniel@iogearbox.net>", "date": "2020-10-08T21:31:43", "name": "[bpf-next,1/6] bpf: improve bpf_redirect_neigh helper description", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "772fd28ea5898f2133afbeab79b21c3b275be928", "submitter": {"id": 123431, "url": "https://patchwork.kernel.org/api/1.1/people/123431/", "name": "Daniel Borkmann", "email": "daniel@iogearbox.net"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11824609/mbox/", "series": [{"id": 361757, "url": "https://patchwork.kernel.org/api/1.1/series/361757/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361757", "date": "2020-10-08T21:31:42", "name": "[bpf-next,1/6] bpf: improve bpf_redirect_neigh helper description", "version": 1, "mbox": "https://patchwork.kernel.org/series/361757/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11824609/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11824609/checks/", "tags": {}}, {"id": 11824611, "url": "https://patchwork.kernel.org/api/1.1/patches/11824611/", "web_url": "https://patchwork.kernel.org/patch/11824611/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<20201008213148.26848-3-daniel@iogearbox.net>", "date": "2020-10-08T21:31:44", "name": "[bpf-next,2/6] bpf: add redirect_peer helper", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "e737fd29310c11c322366ce5d6a930d6d8f0a046", "submitter": {"id": 123431, "url": "https://patchwork.kernel.org/api/1.1/people/123431/", "name": "Daniel Borkmann", "email": "daniel@iogearbox.net"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11824611/mbox/", "series": [{"id": 361757, "url": "https://patchwork.kernel.org/api/1.1/series/361757/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361757", "date": "2020-10-08T21:31:42", "name": "[bpf-next,1/6] bpf: improve bpf_redirect_neigh helper description", "version": 1, "mbox": "https://patchwork.kernel.org/series/361757/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11824611/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11824611/checks/", "tags": {}}, {"id": 11824613, "url": "https://patchwork.kernel.org/api/1.1/patches/11824613/", "web_url": "https://patchwork.kernel.org/patch/11824613/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<20201008213148.26848-6-daniel@iogearbox.net>", "date": "2020-10-08T21:31:47", "name": "[bpf-next,5/6] bpf, selftests: make redirect_neigh test more extensible", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "545b57eee4a9aafd49cc867a46b1ca500963a149", "submitter": {"id": 123431, "url": "https://patchwork.kernel.org/api/1.1/people/123431/", "name": "Daniel Borkmann", "email": "daniel@iogearbox.net"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11824613/mbox/", "series": [{"id": 361757, "url": "https://patchwork.kernel.org/api/1.1/series/361757/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361757", "date": "2020-10-08T21:31:42", "name": "[bpf-next,1/6] bpf: improve bpf_redirect_neigh helper description", "version": 1, "mbox": "https://patchwork.kernel.org/series/361757/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11824613/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11824613/checks/", "tags": {}}, {"id": 11824615, "url": "https://patchwork.kernel.org/api/1.1/patches/11824615/", "web_url": "https://patchwork.kernel.org/patch/11824615/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<20201008213148.26848-7-daniel@iogearbox.net>", "date": "2020-10-08T21:31:48", "name": "[bpf-next,6/6] bpf, selftests: add redirect_peer selftest", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "385b65411b3cc936e7fcdeaec16ea5dc93b5491c", "submitter": {"id": 123431, "url": "https://patchwork.kernel.org/api/1.1/people/123431/", "name": "Daniel Borkmann", "email": "daniel@iogearbox.net"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11824615/mbox/", "series": [{"id": 361757, "url": "https://patchwork.kernel.org/api/1.1/series/361757/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361757", "date": "2020-10-08T21:31:42", "name": "[bpf-next,1/6] bpf: improve bpf_redirect_neigh helper description", "version": 1, "mbox": "https://patchwork.kernel.org/series/361757/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11824615/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11824615/checks/", "tags": {}}, {"id": 11824617, "url": "https://patchwork.kernel.org/api/1.1/patches/11824617/", "web_url": "https://patchwork.kernel.org/patch/11824617/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<20201008213148.26848-4-daniel@iogearbox.net>", "date": "2020-10-08T21:31:45", "name": "[bpf-next,3/6] bpf: allow for map-in-map with dynamic inner array map entries", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "f0ea6fbddbfa0315a3a06b414f6bd0f314680632", "submitter": {"id": 123431, "url": "https://patchwork.kernel.org/api/1.1/people/123431/", "name": "Daniel Borkmann", "email": "daniel@iogearbox.net"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11824617/mbox/", "series": [{"id": 361757, "url": "https://patchwork.kernel.org/api/1.1/series/361757/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361757", "date": "2020-10-08T21:31:42", "name": "[bpf-next,1/6] bpf: improve bpf_redirect_neigh helper description", "version": 1, "mbox": "https://patchwork.kernel.org/series/361757/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11824617/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11824617/checks/", "tags": {}}, {"id": 11824619, "url": "https://patchwork.kernel.org/api/1.1/patches/11824619/", "web_url": "https://patchwork.kernel.org/patch/11824619/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<20201008213148.26848-5-daniel@iogearbox.net>", "date": "2020-10-08T21:31:46", "name": "[bpf-next,4/6] bpf, selftests: add test for different array inner map size", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "0fafc102dd77b2bcc5df71df19780dcb185d1abd", "submitter": {"id": 123431, "url": "https://patchwork.kernel.org/api/1.1/people/123431/", "name": "Daniel Borkmann", "email": "daniel@iogearbox.net"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11824619/mbox/", "series": [{"id": 361757, "url": "https://patchwork.kernel.org/api/1.1/series/361757/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361757", "date": "2020-10-08T21:31:42", "name": "[bpf-next,1/6] bpf: improve bpf_redirect_neigh helper description", "version": 1, "mbox": "https://patchwork.kernel.org/series/361757/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11824619/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11824619/checks/", "tags": {}}], "series/?q=bpf: New approach for BPF MTU handling&": [{"id": 360359, "url": "https://patchwork.kernel.org/api/1.1/series/360359/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=360359", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "name": "bpf: New approach for BPF MTU handling and enforcement", "date": "2020-10-06T16:02:51", "submitter": {"id": 58441, "url": "https://patchwork.kernel.org/api/1.1/people/58441/", "name": "Jesper Dangaard Brouer", "email": "brouer@redhat.com"}, "version": 1, "total": 6, "received_total": 6, "received_all": true, "mbox": "https://patchwork.kernel.org/series/360359/mbox/", "cover_letter": {"id": 11818879, "url": "https://patchwork.kernel.org/api/1.1/covers/11818879/", "web_url": "https://patchwork.kernel.org/cover/11818879/", "msgid": "<160200013701.719143.12665708317930272219.stgit@firesoul>", "date": "2020-10-06T16:02:46", "name": "[bpf-next,V1,0/6] bpf: New approach for BPF MTU handling and enforcement", "mbox": "https://patchwork.kernel.org/cover/11818879/mbox/"}, "patches": [{"id": 11818877, "url": "https://patchwork.kernel.org/api/1.1/patches/11818877/", "web_url": "https://patchwork.kernel.org/patch/11818877/", "msgid": "<160200017146.719143.8604341963140667595.stgit@firesoul>", "date": "2020-10-06T16:02:51", "name": "[bpf-next,V1,1/6] bpf: Remove MTU check in __bpf_skb_max_len", "mbox": "https://patchwork.kernel.org/patch/11818877/mbox/"}, {"id": 11818881, "url": "https://patchwork.kernel.org/api/1.1/patches/11818881/", "web_url": "https://patchwork.kernel.org/patch/11818881/", "msgid": "<160200017655.719143.17344942455389603664.stgit@firesoul>", "date": "2020-10-06T16:02:56", "name": "[bpf-next,V1,2/6] bpf: bpf_fib_lookup return MTU value as output when looked up", "mbox": "https://patchwork.kernel.org/patch/11818881/mbox/"}, {"id": 11818883, "url": "https://patchwork.kernel.org/api/1.1/patches/11818883/", "web_url": "https://patchwork.kernel.org/patch/11818883/", "msgid": "<160200018165.719143.3249298786187115149.stgit@firesoul>", "date": "2020-10-06T16:03:01", "name": "[bpf-next,V1,3/6] bpf: add BPF-helper for reading MTU from net_device via ifindex", "mbox": "https://patchwork.kernel.org/patch/11818883/mbox/"}, {"id": 11818885, "url": "https://patchwork.kernel.org/api/1.1/patches/11818885/", "web_url": "https://patchwork.kernel.org/patch/11818885/", "msgid": "<160200018675.719143.11869126120781563575.stgit@firesoul>", "date": "2020-10-06T16:03:06", "name": "[bpf-next,V1,4/6] bpf: make it possible to identify BPF redirected SKBs", "mbox": "https://patchwork.kernel.org/patch/11818885/mbox/"}, {"id": 11818887, "url": "https://patchwork.kernel.org/api/1.1/patches/11818887/", "web_url": "https://patchwork.kernel.org/patch/11818887/", "msgid": "<160200019184.719143.17780588544420986957.stgit@firesoul>", "date": "2020-10-06T16:03:11", "name": "[bpf-next,V1,5/6] bpf: Add MTU check for TC-BPF packets after egress hook", "mbox": "https://patchwork.kernel.org/patch/11818887/mbox/"}, {"id": 11818889, "url": "https://patchwork.kernel.org/api/1.1/patches/11818889/", "web_url": "https://patchwork.kernel.org/patch/11818889/", "msgid": "<160200019693.719143.11586734942253038578.stgit@firesoul>", "date": "2020-10-06T16:03:17", "name": "[bpf-next,V1,6/6] bpf: drop MTU check when doing TC-BPF redirect to ingress", "mbox": "https://patchwork.kernel.org/patch/11818889/mbox/"}]}, {"id": 361013, "url": "https://patchwork.kernel.org/api/1.1/series/361013/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361013", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "name": "bpf: New approach for BPF MTU handling and enforcement", "date": "2020-10-07T16:22:35", "submitter": {"id": 58441, "url": "https://patchwork.kernel.org/api/1.1/people/58441/", "name": "Jesper Dangaard Brouer", "email": "brouer@redhat.com"}, "version": 2, "total": 6, "received_total": 6, "received_all": true, "mbox": "https://patchwork.kernel.org/series/361013/mbox/", "cover_letter": {"id": 11820997, "url": "https://patchwork.kernel.org/api/1.1/covers/11820997/", "web_url": "https://patchwork.kernel.org/cover/11820997/", "msgid": "<160208770557.798237.11181325462593441941.stgit@firesoul>", "date": "2020-10-07T16:22:35", "name": "[bpf-next,V2,0/6] bpf: New approach for BPF MTU handling and enforcement", "mbox": "https://patchwork.kernel.org/cover/11820997/mbox/"}, "patches": [{"id": 11820999, "url": "https://patchwork.kernel.org/api/1.1/patches/11820999/", "web_url": "https://patchwork.kernel.org/patch/11820999/", "msgid": "<160208776033.798237.4028465222836713720.stgit@firesoul>", "date": "2020-10-07T16:22:40", "name": "[bpf-next,V2,1/6] bpf: Remove MTU check in __bpf_skb_max_len", "mbox": "https://patchwork.kernel.org/patch/11820999/mbox/"}, {"id": 11821001, "url": "https://patchwork.kernel.org/api/1.1/patches/11821001/", "web_url": "https://patchwork.kernel.org/patch/11821001/", "msgid": "<160208776541.798237.663413315328442772.stgit@firesoul>", "date": "2020-10-07T16:22:45", "name": "[bpf-next,V2,2/6] bpf: bpf_fib_lookup return MTU value as output when looked up", "mbox": "https://patchwork.kernel.org/patch/11821001/mbox/"}, {"id": 11821003, "url": "https://patchwork.kernel.org/api/1.1/patches/11821003/", "web_url": "https://patchwork.kernel.org/patch/11821003/", "msgid": "<160208777050.798237.15733498595654853619.stgit@firesoul>", "date": "2020-10-07T16:22:50", "name": "[bpf-next,V2,3/6] bpf: add BPF-helper for MTU checking", "mbox": "https://patchwork.kernel.org/patch/11821003/mbox/"}, {"id": 11821005, "url": "https://patchwork.kernel.org/api/1.1/patches/11821005/", "web_url": "https://patchwork.kernel.org/patch/11821005/", "msgid": "<160208777560.798237.12584544697367464358.stgit@firesoul>", "date": "2020-10-07T16:22:55", "name": "[bpf-next,V2,4/6] bpf: make it possible to identify BPF redirected SKBs", "mbox": "https://patchwork.kernel.org/patch/11821005/mbox/"}, {"id": 11821007, "url": "https://patchwork.kernel.org/api/1.1/patches/11821007/", "web_url": "https://patchwork.kernel.org/patch/11821007/", "msgid": "<160208778070.798237.16265441131909465819.stgit@firesoul>", "date": "2020-10-07T16:23:00", "name": "[bpf-next,V2,5/6] bpf: Add MTU check for TC-BPF packets after egress hook", "mbox": "https://patchwork.kernel.org/patch/11821007/mbox/"}, {"id": 11821021, "url": "https://patchwork.kernel.org/api/1.1/patches/11821021/", "web_url": "https://patchwork.kernel.org/patch/11821021/", "msgid": "<160208778579.798237.7257307543620328206.stgit@firesoul>", "date": "2020-10-07T16:23:05", "name": "[bpf-next,V2,6/6] bpf: drop MTU check when doing TC-BPF redirect to ingress", "mbox": "https://patchwork.kernel.org/patch/11821021/mbox/"}]}, {"id": 361485, "url": "https://patchwork.kernel.org/api/1.1/series/361485/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361485", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "name": "bpf: New approach for BPF MTU handling", "date": "2020-10-08T14:08:57", "submitter": {"id": 58441, "url": "https://patchwork.kernel.org/api/1.1/people/58441/", "name": "Jesper Dangaard Brouer", "email": "brouer@redhat.com"}, "version": 3, "total": 6, "received_total": 6, "received_all": true, "mbox": "https://patchwork.kernel.org/series/361485/mbox/", "cover_letter": {"id": 11823017, "url": "https://patchwork.kernel.org/api/1.1/covers/11823017/", "web_url": "https://patchwork.kernel.org/cover/11823017/", "msgid": "<160216609656.882446.16642490462568561112.stgit@firesoul>", "date": "2020-10-08T14:08:57", "name": "[bpf-next,V3,0/6] bpf: New approach for BPF MTU handling", "mbox": "https://patchwork.kernel.org/cover/11823017/mbox/"}, "patches": [{"id": 11823019, "url": "https://patchwork.kernel.org/api/1.1/patches/11823019/", "web_url": "https://patchwork.kernel.org/patch/11823019/", "msgid": "<160216614239.882446.4447190431655011838.stgit@firesoul>", "date": "2020-10-08T14:09:02", "name": "[bpf-next,V3,1/6] bpf: Remove MTU check in __bpf_skb_max_len", "mbox": "https://patchwork.kernel.org/patch/11823019/mbox/"}, {"id": 11823021, "url": "https://patchwork.kernel.org/api/1.1/patches/11823021/", "web_url": "https://patchwork.kernel.org/patch/11823021/", "msgid": "<160216614748.882446.6805410687451779968.stgit@firesoul>", "date": "2020-10-08T14:09:07", "name": "[bpf-next,V3,2/6] bpf: bpf_fib_lookup return MTU value as output when looked up", "mbox": "https://patchwork.kernel.org/patch/11823021/mbox/"}, {"id": 11823023, "url": "https://patchwork.kernel.org/api/1.1/patches/11823023/", "web_url": "https://patchwork.kernel.org/patch/11823023/", "msgid": "<160216615258.882446.12640007391672866038.stgit@firesoul>", "date": "2020-10-08T14:09:12", "name": "[bpf-next,V3,3/6] bpf: add BPF-helper for MTU checking", "mbox": "https://patchwork.kernel.org/patch/11823023/mbox/"}, {"id": 11823025, "url": "https://patchwork.kernel.org/api/1.1/patches/11823025/", "web_url": "https://patchwork.kernel.org/patch/11823025/", "msgid": "<160216615767.882446.7384364280837100311.stgit@firesoul>", "date": "2020-10-08T14:09:17", "name": "[bpf-next,V3,4/6] bpf: make it possible to identify BPF redirected SKBs", "mbox": "https://patchwork.kernel.org/patch/11823025/mbox/"}, {"id": 11823029, "url": "https://patchwork.kernel.org/api/1.1/patches/11823029/", "web_url": "https://patchwork.kernel.org/patch/11823029/", "msgid": "<160216616276.882446.17894852306425732310.stgit@firesoul>", "date": "2020-10-08T14:09:22", "name": "[bpf-next,V3,5/6] bpf: drop MTU check when doing TC-BPF redirect to ingress", "mbox": "https://patchwork.kernel.org/patch/11823029/mbox/"}, {"id": 11823027, "url": "https://patchwork.kernel.org/api/1.1/patches/11823027/", "web_url": "https://patchwork.kernel.org/patch/11823027/", "msgid": "<160216616785.882446.3058399056188507434.stgit@firesoul>", "date": "2020-10-08T14:09:27", "name": "[bpf-next,V3,6/6] net: inline and splitup is_skb_forwardable", "mbox": "https://patchwork.kernel.org/patch/11823027/mbox/"}]}], "patches/11823019/": {"id": 11823019, "url": "https://patchwork.kernel.org/api/1.1/patches/11823019/", "web_url": "https://patchwork.kernel.org/patch/11823019/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<160216614239.882446.4447190431655011838.stgit@firesoul>", "date": "2020-10-08T14:09:02", "name": "[bpf-next,V3,1/6] bpf: Remove MTU check in __bpf_skb_max_len", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "e03da582d6c8988d5777c7f4c9f6f1144b44fb31", "submitter": {"id": 58441, "url": "https://patchwork.kernel.org/api/1.1/people/58441/", "name": "Jesper Dangaard Brouer", "email": "brouer@redhat.com"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11823019/mbox/", "series": [{"id": 361485, "url": "https://patchwork.kernel.org/api/1.1/series/361485/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361485", "date": "2020-10-08T14:08:57", "name": "bpf: New approach for BPF MTU handling", "version": 3, "mbox": "https://patchwork.kernel.org/series/361485/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11823019/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11823019/checks/", "tags": {}, "headers": {"Return-Path": "<SRS0=0bGE=DP=vger.kernel.org=bpf-owner@kernel.org>", "X-Spam-Checker-Version": "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org", "X-Spam-Level": "", "X-Spam-Status": "No, score=-9.9 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,\n\tDKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,\n\tINCLUDES_PATCH,MAILING_LIST_MULTI,SIGNED_OFF_BY,SPF_HELO_NONE,SPF_PASS\n\tautolearn=ham autolearn_force=no version=3.4.0", "Received": ["from mail.kernel.org (mail.kernel.org [198.145.29.99])\n\tby smtp.lore.kernel.org (Postfix) with ESMTP id C6C51C4363A\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 14:09:14 +0000 (UTC)", "from vger.kernel.org (vger.kernel.org [23.128.96.18])\n\tby mail.kernel.org (Postfix) with ESMTP id 7994921D41\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 14:09:14 +0000 (UTC)", "(majordomo@vger.kernel.org) by vger.kernel.org via listexpand\n        id S1730463AbgJHOJO (ORCPT <rfc822;bpf@archiver.kernel.org>);\n        Thu, 8 Oct 2020 10:09:14 -0400", "from us-smtp-delivery-124.mimecast.com ([216.205.24.124]:43680 \"EHLO\n        us-smtp-delivery-124.mimecast.com\" rhost-flags-OK-OK-OK-OK)\n        by vger.kernel.org with ESMTP id S1730462AbgJHOJN (ORCPT\n        <rfc822;bpf@vger.kernel.org>); Thu, 8 Oct 2020 10:09:13 -0400", "from mimecast-mx01.redhat.com (mimecast-mx01.redhat.com\n [209.132.183.4]) (Using TLS) by relay.mimecast.com with ESMTP id\n us-mta-367-8Cz6xmBoMF-Ir44nneGIUg-1; Thu, 08 Oct 2020 10:09:08 -0400", "from smtp.corp.redhat.com (int-mx02.intmail.prod.int.phx2.redhat.com\n [10.5.11.12])\n        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))\n        (No client certificate requested)\n        by mimecast-mx01.redhat.com (Postfix) with ESMTPS id A45D0425D5;\n        Thu,  8 Oct 2020 14:09:06 +0000 (UTC)", "from firesoul.localdomain (unknown [10.40.208.18])\n        by smtp.corp.redhat.com (Postfix) with ESMTP id 8188D6715F;\n        Thu,  8 Oct 2020 14:09:03 +0000 (UTC)", "from [192.168.42.3] (localhost [IPv6:::1])\n        by firesoul.localdomain (Postfix) with ESMTP id 7372730736C8B;\n        Thu,  8 Oct 2020 16:09:02 +0200 (CEST)"], "Authentication-Results": "mail.kernel.org;\n\tdkim=pass (1024-bit key) header.d=redhat.com header.i=@redhat.com\n header.b=\"C5lBM/ov\"", "DKIM-Signature": "v=1; a=rsa-sha256; c=relaxed/relaxed; d=redhat.com;\n        s=mimecast20190719; t=1602166152;\n        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:\n         to:to:cc:cc:mime-version:mime-version:content-type:content-type:\n         content-transfer-encoding:content-transfer-encoding:\n         in-reply-to:in-reply-to:references:references;\n        bh=DR0sp4u32EKCKy4n9VZeonI26QxCW8ukhDTZMuWfCSY=;\n        b=C5lBM/ovbqlw1P5mnvojB4YVCcvmJppzTcfsAFAbBpF6Z3qP42sEpsun3H5GIzePkhatL2\n        KfpmNbh8jDqTaqb7P9h3VEnis+mG+wYHSq0QtObye7YvG+99t6g+Pvffk4zXdp1l23t4DE\n        FyhWQ3pZaq+muD6I0FNg/j33umDebZ8=", "X-MC-Unique": "8Cz6xmBoMF-Ir44nneGIUg-1", "Subject": "[PATCH bpf-next V3 1/6] bpf: Remove MTU check in __bpf_skb_max_len", "From": "Jesper Dangaard Brouer <brouer@redhat.com>", "To": "bpf@vger.kernel.org", "Cc": "Jesper Dangaard Brouer <brouer@redhat.com>, netdev@vger.kernel.org,\n        Daniel Borkmann <borkmann@iogearbox.net>,\n        Alexei Starovoitov <alexei.starovoitov@gmail.com>,\n        maze@google.com, lmb@cloudflare.com, shaun@tigera.io,\n        Lorenzo Bianconi <lorenzo@kernel.org>, marek@cloudflare.com,\n        John Fastabend <john.fastabend@gmail.com>,\n        Jakub Kicinski <kuba@kernel.org>, eyal.birger@gmail.com", "Date": "Thu, 08 Oct 2020 16:09:02 +0200", "Message-ID": "<160216614239.882446.4447190431655011838.stgit@firesoul>", "In-Reply-To": "<160216609656.882446.16642490462568561112.stgit@firesoul>", "References": "<160216609656.882446.16642490462568561112.stgit@firesoul>", "User-Agent": "StGit/0.19", "MIME-Version": "1.0", "Content-Type": "text/plain; charset=\"utf-8\"", "Content-Transfer-Encoding": "7bit", "X-Scanned-By": "MIMEDefang 2.79 on 10.5.11.12", "Precedence": "bulk", "List-ID": "<bpf.vger.kernel.org>", "X-Mailing-List": "bpf@vger.kernel.org"}, "content": "Multiple BPF-helpers that can manipulate/increase the size of the SKB uses\n__bpf_skb_max_len() as the max-length. This function limit size against\nthe current net_device MTU (skb->dev->mtu).\n\nWhen a BPF-prog grow the packet size, then it should not be limited to the\nMTU. The MTU is a transmit limitation, and software receiving this packet\nshould be allowed to increase the size. Further more, current MTU check in\n__bpf_skb_max_len uses the MTU from ingress/current net_device, which in\ncase of redirects uses the wrong net_device.\n\nKeep a sanity max limit of IP6_MAX_MTU (under CONFIG_IPV6) which is 64KiB\nplus 40 bytes IPv6 header size. If compiled without IPv6 use IP_MAX_MTU.\n\nV3: replace __bpf_skb_max_len() with define and use IPv6 max MTU size.\n\nSigned-off-by: Jesper Dangaard Brouer <brouer@redhat.com>\n---\n net/core/filter.c |   16 ++++++++--------\n 1 file changed, 8 insertions(+), 8 deletions(-)", "diff": "diff --git a/net/core/filter.c b/net/core/filter.c\nindex 05df73780dd3..ddc1f9ba89d1 100644\n--- a/net/core/filter.c\n+++ b/net/core/filter.c\n@@ -3474,11 +3474,11 @@ static int bpf_skb_net_shrink(struct sk_buff *skb, u32 off, u32 len_diff,\n \treturn 0;\n }\n \n-static u32 __bpf_skb_max_len(const struct sk_buff *skb)\n-{\n-\treturn skb->dev ? skb->dev->mtu + skb->dev->hard_header_len :\n-\t\t\t  SKB_MAX_ALLOC;\n-}\n+#ifdef IP6_MAX_MTU /* Depend on CONFIG_IPV6 */\n+#define BPF_SKB_MAX_LEN IP6_MAX_MTU\n+#else\n+#define BPF_SKB_MAX_LEN IP_MAX_MTU\n+#endif\n \n BPF_CALL_4(sk_skb_adjust_room, struct sk_buff *, skb, s32, len_diff,\n \t   u32, mode, u64, flags)\n@@ -3527,7 +3527,7 @@ BPF_CALL_4(bpf_skb_adjust_room, struct sk_buff *, skb, s32, len_diff,\n {\n \tu32 len_cur, len_diff_abs = abs(len_diff);\n \tu32 len_min = bpf_skb_net_base_len(skb);\n-\tu32 len_max = __bpf_skb_max_len(skb);\n+\tu32 len_max = BPF_SKB_MAX_LEN;\n \t__be16 proto = skb->protocol;\n \tbool shrink = len_diff < 0;\n \tu32 off;\n@@ -3610,7 +3610,7 @@ static int bpf_skb_trim_rcsum(struct sk_buff *skb, unsigned int new_len)\n static inline int __bpf_skb_change_tail(struct sk_buff *skb, u32 new_len,\n \t\t\t\t\tu64 flags)\n {\n-\tu32 max_len = __bpf_skb_max_len(skb);\n+\tu32 max_len = BPF_SKB_MAX_LEN;\n \tu32 min_len = __bpf_skb_min_len(skb);\n \tint ret;\n \n@@ -3686,7 +3686,7 @@ static const struct bpf_func_proto sk_skb_change_tail_proto = {\n static inline int __bpf_skb_change_head(struct sk_buff *skb, u32 head_room,\n \t\t\t\t\tu64 flags)\n {\n-\tu32 max_len = __bpf_skb_max_len(skb);\n+\tu32 max_len = BPF_SKB_MAX_LEN;\n \tu32 new_len = skb->len + head_room;\n \tint ret;\n \n", "prefixes": ["bpf-next", "V3", "1/6"]}, "patches/11823021/": {"id": 11823021, "url": "https://patchwork.kernel.org/api/1.1/patches/11823021/", "web_url": "https://patchwork.kernel.org/patch/11823021/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<160216614748.882446.6805410687451779968.stgit@firesoul>", "date": "2020-10-08T14:09:07", "name": "[bpf-next,V3,2/6] bpf: bpf_fib_lookup return MTU value as output when looked up", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "2e4f46d108369f82c59e4226736965a0b3ff5d79", "submitter": {"id": 58441, "url": "https://patchwork.kernel.org/api/1.1/people/58441/", "name": "Jesper Dangaard Brouer", "email": "brouer@redhat.com"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11823021/mbox/", "series": [{"id": 361485, "url": "https://patchwork.kernel.org/api/1.1/series/361485/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361485", "date": "2020-10-08T14:08:57", "name": "bpf: New approach for BPF MTU handling", "version": 3, "mbox": "https://patchwork.kernel.org/series/361485/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11823021/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11823021/checks/", "tags": {}, "headers": {"Return-Path": "<SRS0=0bGE=DP=vger.kernel.org=bpf-owner@kernel.org>", "X-Spam-Checker-Version": "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org", "X-Spam-Level": "", "X-Spam-Status": "No, score=-9.9 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,\n\tDKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,\n\tINCLUDES_PATCH,MAILING_LIST_MULTI,SIGNED_OFF_BY,SPF_HELO_NONE,SPF_PASS\n\tautolearn=ham autolearn_force=no version=3.4.0", "Received": ["from mail.kernel.org (mail.kernel.org [198.145.29.99])\n\tby smtp.lore.kernel.org (Postfix) with ESMTP id 9DD5CC46466\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 14:09:23 +0000 (UTC)", "from vger.kernel.org (vger.kernel.org [23.128.96.18])\n\tby mail.kernel.org (Postfix) with ESMTP id 49739221E7\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 14:09:23 +0000 (UTC)", "(majordomo@vger.kernel.org) by vger.kernel.org via listexpand\n        id S1729957AbgJHOJV (ORCPT <rfc822;bpf@archiver.kernel.org>);\n        Thu, 8 Oct 2020 10:09:21 -0400", "from us-smtp-delivery-124.mimecast.com ([216.205.24.124]:60770 \"EHLO\n        us-smtp-delivery-124.mimecast.com\" rhost-flags-OK-OK-OK-OK)\n        by vger.kernel.org with ESMTP id S1730175AbgJHOJU (ORCPT\n        <rfc822;bpf@vger.kernel.org>); Thu, 8 Oct 2020 10:09:20 -0400", "from mimecast-mx01.redhat.com (mimecast-mx01.redhat.com\n [209.132.183.4]) (Using TLS) by relay.mimecast.com with ESMTP id\n us-mta-373-Stlzde56McmMS4ZHW8avRQ-1; Thu, 08 Oct 2020 10:09:14 -0400", "from smtp.corp.redhat.com (int-mx07.intmail.prod.int.phx2.redhat.com\n [10.5.11.22])\n        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))\n        (No client certificate requested)\n        by mimecast-mx01.redhat.com (Postfix) with ESMTPS id 296701007464;\n        Thu,  8 Oct 2020 14:09:12 +0000 (UTC)", "from firesoul.localdomain (unknown [10.40.208.18])\n        by smtp.corp.redhat.com (Postfix) with ESMTP id 789CD100238C;\n        Thu,  8 Oct 2020 14:09:08 +0000 (UTC)", "from [192.168.42.3] (localhost [IPv6:::1])\n        by firesoul.localdomain (Postfix) with ESMTP id 8ADC330736C8B;\n        Thu,  8 Oct 2020 16:09:07 +0200 (CEST)"], "Authentication-Results": "mail.kernel.org;\n\tdkim=pass (1024-bit key) header.d=redhat.com header.i=@redhat.com\n header.b=\"bY8rn2By\"", "DKIM-Signature": "v=1; a=rsa-sha256; c=relaxed/relaxed; d=redhat.com;\n        s=mimecast20190719; t=1602166159;\n        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:\n         to:to:cc:cc:mime-version:mime-version:content-type:content-type:\n         content-transfer-encoding:content-transfer-encoding:\n         in-reply-to:in-reply-to:references:references;\n        bh=aNSxlJb7LJBgFqN8ntVKESuRlK1yB4RJo8qRNUC681g=;\n        b=bY8rn2ByE3TZDx3nIqdFI591DFWj4GSmSFz9zcEk1KvH0JFsxcuG8fDrPhn3vsDOi0HO4h\n        atvkgyz58CPUeXlxeaJ2ot/7IhbXC5GEw4OYlYs6LwqC6OnTdQ37ley6j1MnYOGlkS1aQF\n        o1/TcbZhI4hVrPLtPXceWWPOV52FD/c=", "X-MC-Unique": "Stlzde56McmMS4ZHW8avRQ-1", "Subject": "[PATCH bpf-next V3 2/6] bpf: bpf_fib_lookup return MTU value as\n output when looked up", "From": "Jesper Dangaard Brouer <brouer@redhat.com>", "To": "bpf@vger.kernel.org", "Cc": "Jesper Dangaard Brouer <brouer@redhat.com>, netdev@vger.kernel.org,\n        Daniel Borkmann <borkmann@iogearbox.net>,\n        Alexei Starovoitov <alexei.starovoitov@gmail.com>,\n        maze@google.com, lmb@cloudflare.com, shaun@tigera.io,\n        Lorenzo Bianconi <lorenzo@kernel.org>, marek@cloudflare.com,\n        John Fastabend <john.fastabend@gmail.com>,\n        Jakub Kicinski <kuba@kernel.org>, eyal.birger@gmail.com", "Date": "Thu, 08 Oct 2020 16:09:07 +0200", "Message-ID": "<160216614748.882446.6805410687451779968.stgit@firesoul>", "In-Reply-To": "<160216609656.882446.16642490462568561112.stgit@firesoul>", "References": "<160216609656.882446.16642490462568561112.stgit@firesoul>", "User-Agent": "StGit/0.19", "MIME-Version": "1.0", "Content-Type": "text/plain; charset=\"utf-8\"", "Content-Transfer-Encoding": "7bit", "X-Scanned-By": "MIMEDefang 2.84 on 10.5.11.22", "Precedence": "bulk", "List-ID": "<bpf.vger.kernel.org>", "X-Mailing-List": "bpf@vger.kernel.org"}, "content": "The BPF-helpers for FIB lookup (bpf_xdp_fib_lookup and bpf_skb_fib_lookup)\ncan perform MTU check and return BPF_FIB_LKUP_RET_FRAG_NEEDED.  The BPF-prog\ndon't know the MTU value that caused this rejection.\n\nIf the BPF-prog wants to implement PMTU (Path MTU Discovery) (rfc1191) it\nneed to know this MTU value for the ICMP packet.\n\nPatch change lookup and result struct bpf_fib_lookup, to contain this MTU\nvalue as output via a union with 'tot_len' as this is the value used for\nthe MTU lookup.\n\nSigned-off-by: Jesper Dangaard Brouer <brouer@redhat.com>\n---\n include/uapi/linux/bpf.h       |   11 +++++++++--\n net/core/filter.c              |   17 ++++++++++++-----\n tools/include/uapi/linux/bpf.h |   11 +++++++++--\n 3 files changed, 30 insertions(+), 9 deletions(-)", "diff": "diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h\nindex d83561e8cd2c..4a46a1de6d16 100644\n--- a/include/uapi/linux/bpf.h\n+++ b/include/uapi/linux/bpf.h\n@@ -2216,6 +2216,9 @@ union bpf_attr {\n  *\t\t* > 0 one of **BPF_FIB_LKUP_RET_** codes explaining why the\n  *\t\t  packet is not forwarded or needs assist from full stack\n  *\n+ *\t\tIf lookup fails with BPF_FIB_LKUP_RET_FRAG_NEEDED, then the MTU\n+ *\t\twas exceeded and result params->mtu contains the MTU.\n+ *\n  * long bpf_sock_hash_update(struct bpf_sock_ops *skops, struct bpf_map *map, void *key, u64 flags)\n  *\tDescription\n  *\t\tAdd an entry to, or update a sockhash *map* referencing sockets.\n@@ -4844,9 +4847,13 @@ struct bpf_fib_lookup {\n \t__be16\tsport;\n \t__be16\tdport;\n \n-\t/* total length of packet from network header - used for MTU check */\n-\t__u16\ttot_len;\n+\tunion {\t/* used for MTU check */\n+\t\t/* input to lookup */\n+\t\t__u16\ttot_len; /* total length of packet from network hdr */\n \n+\t\t/* output: MTU value (if requested check_mtu) */\n+\t\t__u16\tmtu;\n+\t};\n \t/* input: L3 device index for lookup\n \t * output: device index from FIB lookup\n \t */\ndiff --git a/net/core/filter.c b/net/core/filter.c\nindex ddc1f9ba89d1..da74d6ddc4d7 100644\n--- a/net/core/filter.c\n+++ b/net/core/filter.c\n@@ -5186,13 +5186,14 @@ static const struct bpf_func_proto bpf_skb_get_xfrm_state_proto = {\n #if IS_ENABLED(CONFIG_INET) || IS_ENABLED(CONFIG_IPV6)\n static int bpf_fib_set_fwd_params(struct bpf_fib_lookup *params,\n \t\t\t\t  const struct neighbour *neigh,\n-\t\t\t\t  const struct net_device *dev)\n+\t\t\t\t  const struct net_device *dev, u32 mtu)\n {\n \tmemcpy(params->dmac, neigh->ha, ETH_ALEN);\n \tmemcpy(params->smac, dev->dev_addr, ETH_ALEN);\n \tparams->h_vlan_TCI = 0;\n \tparams->h_vlan_proto = 0;\n \tparams->ifindex = dev->ifindex;\n+\tparams->mtu = mtu;\n \n \treturn 0;\n }\n@@ -5276,8 +5277,10 @@ static int bpf_ipv4_fib_lookup(struct net *net, struct bpf_fib_lookup *params,\n \n \tif (check_mtu) {\n \t\tmtu = ip_mtu_from_fib_result(&res, params->ipv4_dst);\n-\t\tif (params->tot_len > mtu)\n+\t\tif (params->tot_len > mtu) {\n+\t\t\tparams->mtu = mtu; /* union with tot_len */\n \t\t\treturn BPF_FIB_LKUP_RET_FRAG_NEEDED;\n+\t\t}\n \t}\n \n \tnhc = res.nhc;\n@@ -5310,7 +5313,7 @@ static int bpf_ipv4_fib_lookup(struct net *net, struct bpf_fib_lookup *params,\n \tif (!neigh)\n \t\treturn BPF_FIB_LKUP_RET_NO_NEIGH;\n \n-\treturn bpf_fib_set_fwd_params(params, neigh, dev);\n+\treturn bpf_fib_set_fwd_params(params, neigh, dev, mtu);\n }\n #endif\n \n@@ -5402,8 +5405,10 @@ static int bpf_ipv6_fib_lookup(struct net *net, struct bpf_fib_lookup *params,\n \n \tif (check_mtu) {\n \t\tmtu = ipv6_stub->ip6_mtu_from_fib6(&res, dst, src);\n-\t\tif (params->tot_len > mtu)\n+\t\tif (params->tot_len > mtu) {\n+\t\t\tparams->mtu = mtu; /* union with tot_len */\n \t\t\treturn BPF_FIB_LKUP_RET_FRAG_NEEDED;\n+\t\t}\n \t}\n \n \tif (res.nh->fib_nh_lws)\n@@ -5422,7 +5427,7 @@ static int bpf_ipv6_fib_lookup(struct net *net, struct bpf_fib_lookup *params,\n \tif (!neigh)\n \t\treturn BPF_FIB_LKUP_RET_NO_NEIGH;\n \n-\treturn bpf_fib_set_fwd_params(params, neigh, dev);\n+\treturn bpf_fib_set_fwd_params(params, neigh, dev, mtu);\n }\n #endif\n \n@@ -5491,6 +5496,8 @@ BPF_CALL_4(bpf_skb_fib_lookup, struct sk_buff *, skb,\n \t\tdev = dev_get_by_index_rcu(net, params->ifindex);\n \t\tif (!is_skb_forwardable(dev, skb))\n \t\t\trc = BPF_FIB_LKUP_RET_FRAG_NEEDED;\n+\n+\t\tparams->mtu = dev->mtu; /* union with tot_len */\n \t}\n \n \treturn rc;\ndiff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h\nindex d83561e8cd2c..4a46a1de6d16 100644\n--- a/tools/include/uapi/linux/bpf.h\n+++ b/tools/include/uapi/linux/bpf.h\n@@ -2216,6 +2216,9 @@ union bpf_attr {\n  *\t\t* > 0 one of **BPF_FIB_LKUP_RET_** codes explaining why the\n  *\t\t  packet is not forwarded or needs assist from full stack\n  *\n+ *\t\tIf lookup fails with BPF_FIB_LKUP_RET_FRAG_NEEDED, then the MTU\n+ *\t\twas exceeded and result params->mtu contains the MTU.\n+ *\n  * long bpf_sock_hash_update(struct bpf_sock_ops *skops, struct bpf_map *map, void *key, u64 flags)\n  *\tDescription\n  *\t\tAdd an entry to, or update a sockhash *map* referencing sockets.\n@@ -4844,9 +4847,13 @@ struct bpf_fib_lookup {\n \t__be16\tsport;\n \t__be16\tdport;\n \n-\t/* total length of packet from network header - used for MTU check */\n-\t__u16\ttot_len;\n+\tunion {\t/* used for MTU check */\n+\t\t/* input to lookup */\n+\t\t__u16\ttot_len; /* total length of packet from network hdr */\n \n+\t\t/* output: MTU value (if requested check_mtu) */\n+\t\t__u16\tmtu;\n+\t};\n \t/* input: L3 device index for lookup\n \t * output: device index from FIB lookup\n \t */\n", "prefixes": ["bpf-next", "V3", "2/6"]}, "patches/11823023/": {"id": 11823023, "url": "https://patchwork.kernel.org/api/1.1/patches/11823023/", "web_url": "https://patchwork.kernel.org/patch/11823023/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<160216615258.882446.12640007391672866038.stgit@firesoul>", "date": "2020-10-08T14:09:12", "name": "[bpf-next,V3,3/6] bpf: add BPF-helper for MTU checking", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "9ae16fe36265a9ab56838df02c4923db7864e4aa", "submitter": {"id": 58441, "url": "https://patchwork.kernel.org/api/1.1/people/58441/", "name": "Jesper Dangaard Brouer", "email": "brouer@redhat.com"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11823023/mbox/", "series": [{"id": 361485, "url": "https://patchwork.kernel.org/api/1.1/series/361485/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361485", "date": "2020-10-08T14:08:57", "name": "bpf: New approach for BPF MTU handling", "version": 3, "mbox": "https://patchwork.kernel.org/series/361485/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11823023/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11823023/checks/", "tags": {}, "headers": {"Return-Path": "<SRS0=0bGE=DP=vger.kernel.org=bpf-owner@kernel.org>", "X-Spam-Checker-Version": "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org", "X-Spam-Level": "", "X-Spam-Status": "No, score=-9.9 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,\n\tDKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,\n\tINCLUDES_PATCH,MAILING_LIST_MULTI,SIGNED_OFF_BY,SPF_HELO_NONE,SPF_PASS\n\tautolearn=ham autolearn_force=no version=3.4.0", "Received": ["from mail.kernel.org (mail.kernel.org [198.145.29.99])\n\tby smtp.lore.kernel.org (Postfix) with ESMTP id 27259C4363C\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 14:09:29 +0000 (UTC)", "from vger.kernel.org (vger.kernel.org [23.128.96.18])\n\tby mail.kernel.org (Postfix) with ESMTP id B9C832184D\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 14:09:28 +0000 (UTC)", "(majordomo@vger.kernel.org) by vger.kernel.org via listexpand\n        id S1730489AbgJHOJ1 (ORCPT <rfc822;bpf@archiver.kernel.org>);\n        Thu, 8 Oct 2020 10:09:27 -0400", "from us-smtp-delivery-124.mimecast.com ([63.128.21.124]:49034 \"EHLO\n        us-smtp-delivery-124.mimecast.com\" rhost-flags-OK-OK-OK-OK)\n        by vger.kernel.org with ESMTP id S1730470AbgJHOJW (ORCPT\n        <rfc822;bpf@vger.kernel.org>); Thu, 8 Oct 2020 10:09:22 -0400", "from mimecast-mx01.redhat.com (mimecast-mx01.redhat.com\n [209.132.183.4]) (Using TLS) by relay.mimecast.com with ESMTP id\n us-mta-328-Av2b2wdpNL2mDCN8UMIFhA-1; Thu, 08 Oct 2020 10:09:16 -0400", "from smtp.corp.redhat.com (int-mx07.intmail.prod.int.phx2.redhat.com\n [10.5.11.22])\n        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))\n        (No client certificate requested)\n        by mimecast-mx01.redhat.com (Postfix) with ESMTPS id 24940186DD23;\n        Thu,  8 Oct 2020 14:09:14 +0000 (UTC)", "from firesoul.localdomain (unknown [10.40.208.18])\n        by smtp.corp.redhat.com (Postfix) with ESMTP id 91AB8100164C;\n        Thu,  8 Oct 2020 14:09:13 +0000 (UTC)", "from [192.168.42.3] (localhost [IPv6:::1])\n        by firesoul.localdomain (Postfix) with ESMTP id A33E030736C8B;\n        Thu,  8 Oct 2020 16:09:12 +0200 (CEST)"], "Authentication-Results": "mail.kernel.org;\n\tdkim=pass (1024-bit key) header.d=redhat.com header.i=@redhat.com\n header.b=\"PREaK7QS\"", "DKIM-Signature": "v=1; a=rsa-sha256; c=relaxed/relaxed; d=redhat.com;\n        s=mimecast20190719; t=1602166160;\n        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:\n         to:to:cc:cc:mime-version:mime-version:content-type:content-type:\n         content-transfer-encoding:content-transfer-encoding:\n         in-reply-to:in-reply-to:references:references;\n        bh=Kd8+ztf2QW0C7V1VqwOxTA1gFf0+7IbwajkAPhwFe0U=;\n        b=PREaK7QS/yYM337cFGjUlTwPIftrbEIVuFOTSzMZznoDZBAD69dOHE02TUDsM8rx2GoWFX\n        ludhLqhM1TSxpEJJWkJmp/9jnYevVswT59q9bs9zCIYuyV0bn3qRfLxMCK+FTKcfKspduf\n        2Y+jH6qlhsRhBPtUINF2JV1aaxwi/Sc=", "X-MC-Unique": "Av2b2wdpNL2mDCN8UMIFhA-1", "Subject": "[PATCH bpf-next V3 3/6] bpf: add BPF-helper for MTU checking", "From": "Jesper Dangaard Brouer <brouer@redhat.com>", "To": "bpf@vger.kernel.org", "Cc": "Jesper Dangaard Brouer <brouer@redhat.com>, netdev@vger.kernel.org,\n        Daniel Borkmann <borkmann@iogearbox.net>,\n        Alexei Starovoitov <alexei.starovoitov@gmail.com>,\n        maze@google.com, lmb@cloudflare.com, shaun@tigera.io,\n        Lorenzo Bianconi <lorenzo@kernel.org>, marek@cloudflare.com,\n        John Fastabend <john.fastabend@gmail.com>,\n        Jakub Kicinski <kuba@kernel.org>, eyal.birger@gmail.com", "Date": "Thu, 08 Oct 2020 16:09:12 +0200", "Message-ID": "<160216615258.882446.12640007391672866038.stgit@firesoul>", "In-Reply-To": "<160216609656.882446.16642490462568561112.stgit@firesoul>", "References": "<160216609656.882446.16642490462568561112.stgit@firesoul>", "User-Agent": "StGit/0.19", "MIME-Version": "1.0", "Content-Type": "text/plain; charset=\"utf-8\"", "Content-Transfer-Encoding": "7bit", "X-Scanned-By": "MIMEDefang 2.84 on 10.5.11.22", "Precedence": "bulk", "List-ID": "<bpf.vger.kernel.org>", "X-Mailing-List": "bpf@vger.kernel.org"}, "content": "This BPF-helper bpf_mtu_check() works for both XDP and TC-BPF programs.\n\nThe API is designed to help the BPF-programmer, that want to do packet\ncontext size changes, which involves other helpers. These other helpers\nusually does a delta size adjustment. This helper also support a delta\nsize (len_diff), which allow BPF-programmer to reuse arguments needed by\nthese other helpers, and perform the MTU check prior to doing any actual\nsize adjustment of the packet context.\n\nV3: Take L2/ETH_HLEN header size into account and document it.\n\nSigned-off-by: Jesper Dangaard Brouer <brouer@redhat.com>\n---\n include/uapi/linux/bpf.h       |   63 +++++++++++++++++++++\n net/core/filter.c              |  119 ++++++++++++++++++++++++++++++++++++++++\n tools/include/uapi/linux/bpf.h |   63 +++++++++++++++++++++\n 3 files changed, 245 insertions(+)", "diff": "diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h\nindex 4a46a1de6d16..1dcf5d8195f4 100644\n--- a/include/uapi/linux/bpf.h\n+++ b/include/uapi/linux/bpf.h\n@@ -3718,6 +3718,56 @@ union bpf_attr {\n  *\t\tnever return NULL.\n  *\tReturn\n  *\t\tA pointer pointing to the kernel percpu variable on this cpu.\n+ *\n+ * int bpf_mtu_check(void *ctx, u32 ifindex, u32 *mtu_result, s32 len_diff, u64 flags)\n+ *\tDescription\n+ *\t\tCheck ctx packet size against MTU of net device (based on\n+ *\t\t*ifindex*).  This helper will likely be used in combination with\n+ *\t\thelpers that adjust/change the packet size.  The argument\n+ *\t\t*len_diff* can be used for querying with a planned size\n+ *\t\tchange. This allows to check MTU prior to changing packet ctx.\n+ *\n+ *\t\tThe Linux kernel route table can configure MTUs on a more\n+ *\t\tspecific per route level, which is not provided by this helper.\n+ *\t\tFor route level MTU checks use the **bpf_fib_lookup**\\ ()\n+ *\t\thelper.\n+ *\n+ *\t\t*ctx* is either **struct xdp_md** for XDP programs or\n+ *\t\t**struct sk_buff** for tc cls_act programs.\n+ *\n+ *\t\tThe *flags* argument can be a combination of one or more of the\n+ *\t\tfollowing values:\n+ *\n+ *              **BPF_MTU_CHK_RELAX**\n+ *\t\t\tThis flag relax or increase the MTU with room for one\n+ *\t\t\tVLAN header (4 bytes) and take into account net device\n+ *\t\t\thard_header_len.  This relaxation is also used by the\n+ *\t\t\tkernels own forwarding MTU checks.\n+ *\n+ *\t\t**BPF_MTU_CHK_GSO**\n+ *\t\t\tThis flag will only works for *ctx* **struct sk_buff**.\n+ *\t\t\tIf packet context contains extra packet segment buffers\n+ *\t\t\t(often knows as frags), then those are also checked\n+ *\t\t\tagainst the MTU size.\n+ *\n+ *\t\tThe *mtu_result* pointer contains the MTU value of the net\n+ *\t\tdevice including the L2 header size (usually 14 bytes Ethernet\n+ *\t\theader). The net device configured MTU is the L3 size, but as\n+ *\t\tXDP and TX length operate at L2 this helper include L2 header\n+ *\t\tsize in reported MTU.\n+ *\n+ *\tReturn\n+ *\t\t* 0 on success, and populate MTU value in *mtu_result* pointer.\n+ *\n+ *\t\t* < 0 if any input argument is invalid (*mtu_result* not updated)\n+ *\n+ *\t\tMTU violations return positive values, but also populate MTU\n+ *\t\tvalue in *mtu_result* pointer, as this can be needed for\n+ *\t\timplemeting PMTU handing:\n+ *\n+ *\t\t* **BPF_MTU_CHK_RET_FRAG_NEEDED**\n+ *\t\t* **BPF_MTU_CHK_RET_GSO_TOOBIG**\n+ *\n  */\n #define __BPF_FUNC_MAPPER(FN)\t\t\\\n \tFN(unspec),\t\t\t\\\n@@ -3875,6 +3925,7 @@ union bpf_attr {\n \tFN(redirect_neigh),\t\t\\\n \tFN(bpf_per_cpu_ptr),            \\\n \tFN(bpf_this_cpu_ptr),\t\t\\\n+\tFN(mtu_check),\t\t\t\\\n \t/* */\n \n /* integer value in 'imm' field of BPF_CALL instruction selects which helper\n@@ -4889,6 +4940,18 @@ struct bpf_fib_lookup {\n \t__u8\tdmac[6];     /* ETH_ALEN */\n };\n \n+/* bpf_mtu_check flags*/\n+enum  bpf_mtu_check_flags {\n+\tBPF_MTU_CHK_RELAX = (1U << 0),\n+\tBPF_MTU_CHK_GSO   = (1U << 1),\n+};\n+\n+enum bpf_mtu_check_ret {\n+\tBPF_MTU_CHK_RET_SUCCESS,      /* check and lookup successful */\n+\tBPF_MTU_CHK_RET_FRAG_NEEDED,  /* fragmentation required to fwd */\n+\tBPF_MTU_CHK_RET_GSO_TOOBIG,   /* GSO re-segmentation needed to fwd */\n+};\n+\n enum bpf_task_fd_type {\n \tBPF_FD_TYPE_RAW_TRACEPOINT,\t/* tp name */\n \tBPF_FD_TYPE_TRACEPOINT,\t\t/* tp name */\ndiff --git a/net/core/filter.c b/net/core/filter.c\nindex da74d6ddc4d7..5986156e700e 100644\n--- a/net/core/filter.c\n+++ b/net/core/filter.c\n@@ -5513,6 +5513,121 @@ static const struct bpf_func_proto bpf_skb_fib_lookup_proto = {\n \t.arg4_type\t= ARG_ANYTHING,\n };\n \n+static int bpf_mtu_lookup(struct net *netns, u32 ifindex, u64 flags)\n+{\n+\tstruct net_device *dev;\n+\tint mtu;\n+\n+\tdev = dev_get_by_index_rcu(netns, ifindex);\n+\tif (!dev)\n+\t\treturn -ENODEV;\n+\n+\t/* XDP+TC len is L2: Add L2-header as dev MTU is L3 size */\n+\tmtu = dev->mtu + dev->hard_header_len;\n+\n+\t/*  Same relax as xdp_ok_fwd_dev() and is_skb_forwardable() */\n+\tif (flags & BPF_MTU_CHK_RELAX)\n+\t\tmtu += VLAN_HLEN;\n+\n+\treturn mtu;\n+}\n+\n+static unsigned int __bpf_len_adjust_positive(unsigned int len, int len_diff)\n+{\n+\tint len_new = len + len_diff; /* notice len_diff can be negative */\n+\n+\tif (len_new > 0)\n+\t\treturn len_new;\n+\n+\treturn 0;\n+}\n+\n+BPF_CALL_5(bpf_skb_mtu_check, struct sk_buff *, skb,\n+\t   u32, ifindex, u32 *, mtu_result, s32, len_diff, u64, flags)\n+{\n+\tstruct net *netns = dev_net(skb->dev);\n+\tint ret = BPF_MTU_CHK_RET_SUCCESS;\n+\tunsigned int len = skb->len;\n+\tint mtu;\n+\n+\tif (flags & ~(BPF_MTU_CHK_RELAX | BPF_MTU_CHK_GSO))\n+\t\treturn -EINVAL;\n+\n+\tmtu = bpf_mtu_lookup(netns, ifindex, flags);\n+\tif (unlikely(mtu < 0))\n+\t\treturn mtu; /* errno */\n+\n+\tlen = __bpf_len_adjust_positive(len, len_diff);\n+\tif (len > mtu) {\n+\t\tret = BPF_MTU_CHK_RET_FRAG_NEEDED;\n+\t\tgoto out;\n+\t}\n+\n+\tif (flags & BPF_MTU_CHK_GSO &&\n+\t    skb_is_gso(skb) &&\n+\t    skb_gso_validate_network_len(skb, mtu)) {\n+\t\tret = BPF_MTU_CHK_RET_GSO_TOOBIG;\n+\t\tgoto out;\n+\t}\n+\n+out:\n+\tif (mtu_result)\n+\t\t*mtu_result = mtu;\n+\n+\treturn ret;\n+}\n+\n+BPF_CALL_5(bpf_xdp_mtu_check, struct xdp_buff *, xdp,\n+\t   u32, ifindex, u32 *, mtu_result, s32, len_diff, u64, flags)\n+{\n+\tunsigned int len = xdp->data_end - xdp->data;\n+\tstruct net_device *dev = xdp->rxq->dev;\n+\tstruct net *netns = dev_net(dev);\n+\tint ret = BPF_MTU_CHK_RET_SUCCESS;\n+\tint mtu;\n+\n+\t/* XDP variant doesn't support multi-buffer segment check (yet) */\n+\tif (flags & ~BPF_MTU_CHK_RELAX)\n+\t\treturn -EINVAL;\n+\n+\tmtu = bpf_mtu_lookup(netns, ifindex, flags);\n+\tif (unlikely(mtu < 0))\n+\t\treturn mtu; /* errno */\n+\n+\tlen = __bpf_len_adjust_positive(len, len_diff);\n+\tif (len > mtu) {\n+\t\tret = BPF_MTU_CHK_RET_FRAG_NEEDED;\n+\t\tgoto out;\n+\t}\n+out:\n+\tif (mtu_result)\n+\t\t*mtu_result = mtu;\n+\n+\treturn ret;\n+}\n+\n+static const struct bpf_func_proto bpf_skb_mtu_check_proto = {\n+\t.func\t\t= bpf_skb_mtu_check,\n+\t.gpl_only\t= true,\n+\t.ret_type\t= RET_INTEGER,\n+\t.arg1_type      = ARG_PTR_TO_CTX,\n+\t.arg2_type      = ARG_ANYTHING,\n+\t.arg3_type      = ARG_PTR_TO_MEM,\n+\t.arg4_type      = ARG_ANYTHING,\n+\t.arg5_type      = ARG_ANYTHING,\n+};\n+\n+static const struct bpf_func_proto bpf_xdp_mtu_check_proto = {\n+\t.func\t\t= bpf_xdp_mtu_check,\n+\t.gpl_only\t= true,\n+\t.ret_type\t= RET_INTEGER,\n+\t.arg1_type      = ARG_PTR_TO_CTX,\n+\t.arg2_type      = ARG_ANYTHING,\n+\t.arg3_type      = ARG_PTR_TO_MEM,\n+\t.arg4_type      = ARG_ANYTHING,\n+\t.arg5_type      = ARG_ANYTHING,\n+};\n+\n #if IS_ENABLED(CONFIG_IPV6_SEG6_BPF)\n static int bpf_push_seg6_encap(struct sk_buff *skb, u32 type, void *hdr, u32 len)\n {\n@@ -7076,6 +7191,8 @@ tc_cls_act_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)\n \t\treturn &bpf_get_socket_uid_proto;\n \tcase BPF_FUNC_fib_lookup:\n \t\treturn &bpf_skb_fib_lookup_proto;\n+\tcase BPF_FUNC_mtu_check:\n+\t\treturn &bpf_skb_mtu_check_proto;\n \tcase BPF_FUNC_sk_fullsock:\n \t\treturn &bpf_sk_fullsock_proto;\n \tcase BPF_FUNC_sk_storage_get:\n@@ -7145,6 +7262,8 @@ xdp_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)\n \t\treturn &bpf_xdp_adjust_tail_proto;\n \tcase BPF_FUNC_fib_lookup:\n \t\treturn &bpf_xdp_fib_lookup_proto;\n+\tcase BPF_FUNC_mtu_check:\n+\t\treturn &bpf_xdp_mtu_check_proto;\n #ifdef CONFIG_INET\n \tcase BPF_FUNC_sk_lookup_udp:\n \t\treturn &bpf_xdp_sk_lookup_udp_proto;\ndiff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h\nindex 4a46a1de6d16..1dcf5d8195f4 100644\n--- a/tools/include/uapi/linux/bpf.h\n+++ b/tools/include/uapi/linux/bpf.h\n@@ -3718,6 +3718,56 @@ union bpf_attr {\n  *\t\tnever return NULL.\n  *\tReturn\n  *\t\tA pointer pointing to the kernel percpu variable on this cpu.\n+ *\n+ * int bpf_mtu_check(void *ctx, u32 ifindex, u32 *mtu_result, s32 len_diff, u64 flags)\n+ *\tDescription\n+ *\t\tCheck ctx packet size against MTU of net device (based on\n+ *\t\t*ifindex*).  This helper will likely be used in combination with\n+ *\t\thelpers that adjust/change the packet size.  The argument\n+ *\t\t*len_diff* can be used for querying with a planned size\n+ *\t\tchange. This allows to check MTU prior to changing packet ctx.\n+ *\n+ *\t\tThe Linux kernel route table can configure MTUs on a more\n+ *\t\tspecific per route level, which is not provided by this helper.\n+ *\t\tFor route level MTU checks use the **bpf_fib_lookup**\\ ()\n+ *\t\thelper.\n+ *\n+ *\t\t*ctx* is either **struct xdp_md** for XDP programs or\n+ *\t\t**struct sk_buff** for tc cls_act programs.\n+ *\n+ *\t\tThe *flags* argument can be a combination of one or more of the\n+ *\t\tfollowing values:\n+ *\n+ *              **BPF_MTU_CHK_RELAX**\n+ *\t\t\tThis flag relax or increase the MTU with room for one\n+ *\t\t\tVLAN header (4 bytes) and take into account net device\n+ *\t\t\thard_header_len.  This relaxation is also used by the\n+ *\t\t\tkernels own forwarding MTU checks.\n+ *\n+ *\t\t**BPF_MTU_CHK_GSO**\n+ *\t\t\tThis flag will only works for *ctx* **struct sk_buff**.\n+ *\t\t\tIf packet context contains extra packet segment buffers\n+ *\t\t\t(often knows as frags), then those are also checked\n+ *\t\t\tagainst the MTU size.\n+ *\n+ *\t\tThe *mtu_result* pointer contains the MTU value of the net\n+ *\t\tdevice including the L2 header size (usually 14 bytes Ethernet\n+ *\t\theader). The net device configured MTU is the L3 size, but as\n+ *\t\tXDP and TX length operate at L2 this helper include L2 header\n+ *\t\tsize in reported MTU.\n+ *\n+ *\tReturn\n+ *\t\t* 0 on success, and populate MTU value in *mtu_result* pointer.\n+ *\n+ *\t\t* < 0 if any input argument is invalid (*mtu_result* not updated)\n+ *\n+ *\t\tMTU violations return positive values, but also populate MTU\n+ *\t\tvalue in *mtu_result* pointer, as this can be needed for\n+ *\t\timplemeting PMTU handing:\n+ *\n+ *\t\t* **BPF_MTU_CHK_RET_FRAG_NEEDED**\n+ *\t\t* **BPF_MTU_CHK_RET_GSO_TOOBIG**\n+ *\n  */\n #define __BPF_FUNC_MAPPER(FN)\t\t\\\n \tFN(unspec),\t\t\t\\\n@@ -3875,6 +3925,7 @@ union bpf_attr {\n \tFN(redirect_neigh),\t\t\\\n \tFN(bpf_per_cpu_ptr),            \\\n \tFN(bpf_this_cpu_ptr),\t\t\\\n+\tFN(mtu_check),\t\t\t\\\n \t/* */\n \n /* integer value in 'imm' field of BPF_CALL instruction selects which helper\n@@ -4889,6 +4940,18 @@ struct bpf_fib_lookup {\n \t__u8\tdmac[6];     /* ETH_ALEN */\n };\n \n+/* bpf_mtu_check flags*/\n+enum  bpf_mtu_check_flags {\n+\tBPF_MTU_CHK_RELAX = (1U << 0),\n+\tBPF_MTU_CHK_GSO   = (1U << 1),\n+};\n+\n+enum bpf_mtu_check_ret {\n+\tBPF_MTU_CHK_RET_SUCCESS,      /* check and lookup successful */\n+\tBPF_MTU_CHK_RET_FRAG_NEEDED,  /* fragmentation required to fwd */\n+\tBPF_MTU_CHK_RET_GSO_TOOBIG,   /* GSO re-segmentation needed to fwd */\n+};\n+\n enum bpf_task_fd_type {\n \tBPF_FD_TYPE_RAW_TRACEPOINT,\t/* tp name */\n \tBPF_FD_TYPE_TRACEPOINT,\t\t/* tp name */\n", "prefixes": ["bpf-next", "V3", "3/6"]}, "patches/11823025/": {"id": 11823025, "url": "https://patchwork.kernel.org/api/1.1/patches/11823025/", "web_url": "https://patchwork.kernel.org/patch/11823025/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<160216615767.882446.7384364280837100311.stgit@firesoul>", "date": "2020-10-08T14:09:17", "name": "[bpf-next,V3,4/6] bpf: make it possible to identify BPF redirected SKBs", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "3a64f160602b5c44de8359c96a34f976a8e0b00a", "submitter": {"id": 58441, "url": "https://patchwork.kernel.org/api/1.1/people/58441/", "name": "Jesper Dangaard Brouer", "email": "brouer@redhat.com"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11823025/mbox/", "series": [{"id": 361485, "url": "https://patchwork.kernel.org/api/1.1/series/361485/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361485", "date": "2020-10-08T14:08:57", "name": "bpf: New approach for BPF MTU handling", "version": 3, "mbox": "https://patchwork.kernel.org/series/361485/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11823025/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11823025/checks/", "tags": {}, "headers": {"Return-Path": "<SRS0=0bGE=DP=vger.kernel.org=bpf-owner@kernel.org>", "X-Spam-Checker-Version": "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org", "X-Spam-Level": "", "X-Spam-Status": "No, score=-9.9 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,\n\tDKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,\n\tINCLUDES_PATCH,MAILING_LIST_MULTI,SIGNED_OFF_BY,SPF_HELO_NONE,SPF_PASS\n\tautolearn=ham autolearn_force=no version=3.4.0", "Received": ["from mail.kernel.org (mail.kernel.org [198.145.29.99])\n\tby smtp.lore.kernel.org (Postfix) with ESMTP id 2912DC04EBE\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 14:09:34 +0000 (UTC)", "from vger.kernel.org (vger.kernel.org [23.128.96.18])\n\tby mail.kernel.org (Postfix) with ESMTP id 8F94B21D7A\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 14:09:33 +0000 (UTC)", "(majordomo@vger.kernel.org) by vger.kernel.org via listexpand\n        id S1730506AbgJHOJ3 (ORCPT <rfc822;bpf@archiver.kernel.org>);\n        Thu, 8 Oct 2020 10:09:29 -0400", "from us-smtp-delivery-124.mimecast.com ([63.128.21.124]:52997 \"EHLO\n        us-smtp-delivery-124.mimecast.com\" rhost-flags-OK-OK-OK-OK)\n        by vger.kernel.org with ESMTP id S1730487AbgJHOJ2 (ORCPT\n        <rfc822;bpf@vger.kernel.org>); Thu, 8 Oct 2020 10:09:28 -0400", "from mimecast-mx01.redhat.com (mimecast-mx01.redhat.com\n [209.132.183.4]) (Using TLS) by relay.mimecast.com with ESMTP id\n us-mta-38-Yk6eGKn8O5Kp6pQHq9mlsw-1; Thu, 08 Oct 2020 10:09:23 -0400", "from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com\n [10.5.11.16])\n        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))\n        (No client certificate requested)\n        by mimecast-mx01.redhat.com (Postfix) with ESMTPS id 9C1801074644;\n        Thu,  8 Oct 2020 14:09:21 +0000 (UTC)", "from firesoul.localdomain (unknown [10.40.208.18])\n        by smtp.corp.redhat.com (Postfix) with ESMTP id A53CA5C1BD;\n        Thu,  8 Oct 2020 14:09:18 +0000 (UTC)", "from [192.168.42.3] (localhost [IPv6:::1])\n        by firesoul.localdomain (Postfix) with ESMTP id B7C7830736C8B;\n        Thu,  8 Oct 2020 16:09:17 +0200 (CEST)"], "Authentication-Results": "mail.kernel.org;\n\tdkim=pass (1024-bit key) header.d=redhat.com header.i=@redhat.com\n header.b=\"gdBeDt+L\"", "DKIM-Signature": "v=1; a=rsa-sha256; c=relaxed/relaxed; d=redhat.com;\n        s=mimecast20190719; t=1602166167;\n        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:\n         to:to:cc:cc:mime-version:mime-version:content-type:content-type:\n         content-transfer-encoding:content-transfer-encoding:\n         in-reply-to:in-reply-to:references:references;\n        bh=6dTbqUjrK5nHaC9UNpKTzqrGr/FcLg1cIVA/PuBqNMQ=;\n        b=gdBeDt+LcSEgdXPqOtq6YN1nVLrFsjmKOWsceaOw3G7soyMpimnVttlHnP6qApbiYUNmKh\n        Z4iWao1ZfVjq8+c+GrvyA7aPKEyL25dhhse73ds8C3EBtoCuTnMhVAzv82vja8moGbB9//\n        XlAuQGrlugqSg4urdcFhGW5zGd0dJDE=", "X-MC-Unique": "Yk6eGKn8O5Kp6pQHq9mlsw-1", "Subject": "[PATCH bpf-next V3 4/6] bpf: make it possible to identify BPF\n redirected SKBs", "From": "Jesper Dangaard Brouer <brouer@redhat.com>", "To": "bpf@vger.kernel.org", "Cc": "Jesper Dangaard Brouer <brouer@redhat.com>, netdev@vger.kernel.org,\n        Daniel Borkmann <borkmann@iogearbox.net>,\n        Alexei Starovoitov <alexei.starovoitov@gmail.com>,\n        maze@google.com, lmb@cloudflare.com, shaun@tigera.io,\n        Lorenzo Bianconi <lorenzo@kernel.org>, marek@cloudflare.com,\n        John Fastabend <john.fastabend@gmail.com>,\n        Jakub Kicinski <kuba@kernel.org>, eyal.birger@gmail.com", "Date": "Thu, 08 Oct 2020 16:09:17 +0200", "Message-ID": "<160216615767.882446.7384364280837100311.stgit@firesoul>", "In-Reply-To": "<160216609656.882446.16642490462568561112.stgit@firesoul>", "References": "<160216609656.882446.16642490462568561112.stgit@firesoul>", "User-Agent": "StGit/0.19", "MIME-Version": "1.0", "Content-Type": "text/plain; charset=\"utf-8\"", "Content-Transfer-Encoding": "7bit", "X-Scanned-By": "MIMEDefang 2.79 on 10.5.11.16", "Precedence": "bulk", "List-ID": "<bpf.vger.kernel.org>", "X-Mailing-List": "bpf@vger.kernel.org"}, "content": "This change makes it possible to identify SKBs that have been redirected\nby TC-BPF (cls_act). This is needed for a number of cases.\n\n(1) For collaborating with driver ifb net_devices.\n(2) For avoiding starting generic-XDP prog on TC ingress redirect.\n\nSigned-off-by: Jesper Dangaard Brouer <brouer@redhat.com>\n---\n net/core/dev.c    |    2 ++\n net/sched/Kconfig |    1 +\n 2 files changed, 3 insertions(+)", "diff": "diff --git a/net/core/dev.c b/net/core/dev.c\nindex 9d55bf5d1a65..b433098896b2 100644\n--- a/net/core/dev.c\n+++ b/net/core/dev.c\n@@ -3885,6 +3885,7 @@ sch_handle_egress(struct sk_buff *skb, int *ret, struct net_device *dev)\n \t\treturn NULL;\n \tcase TC_ACT_REDIRECT:\n \t\t/* No need to push/pop skb's mac_header here on egress! */\n+\t\tskb_set_redirected(skb, false);\n \t\tskb_do_redirect(skb);\n \t\t*ret = NET_XMIT_SUCCESS;\n \t\treturn NULL;\n@@ -4974,6 +4975,7 @@ sch_handle_ingress(struct sk_buff *skb, struct packet_type **pt_prev, int *ret,\n \t\t * redirecting to another netdev\n \t\t */\n \t\t__skb_push(skb, skb->mac_len);\n+\t\tskb_set_redirected(skb, true);\n \t\tskb_do_redirect(skb);\n \t\treturn NULL;\n \tcase TC_ACT_CONSUMED:\ndiff --git a/net/sched/Kconfig b/net/sched/Kconfig\nindex a3b37d88800e..a1bbaa8fd054 100644\n--- a/net/sched/Kconfig\n+++ b/net/sched/Kconfig\n@@ -384,6 +384,7 @@ config NET_SCH_INGRESS\n \tdepends on NET_CLS_ACT\n \tselect NET_INGRESS\n \tselect NET_EGRESS\n+\tselect NET_REDIRECT\n \thelp\n \t  Say Y here if you want to use classifiers for incoming and/or outgoing\n \t  packets. This qdisc doesn't do anything else besides running classifiers,\n", "prefixes": ["bpf-next", "V3", "4/6"]}, "patches/11823029/": {"id": 11823029, "url": "https://patchwork.kernel.org/api/1.1/patches/11823029/", "web_url": "https://patchwork.kernel.org/patch/11823029/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<160216616276.882446.17894852306425732310.stgit@firesoul>", "date": "2020-10-08T14:09:22", "name": "[bpf-next,V3,5/6] bpf: drop MTU check when doing TC-BPF redirect to ingress", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "1bd953d37f5d585ee8db1f2ffe6f54ccad075815", "submitter": {"id": 58441, "url": "https://patchwork.kernel.org/api/1.1/people/58441/", "name": "Jesper Dangaard Brouer", "email": "brouer@redhat.com"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11823029/mbox/", "series": [{"id": 361485, "url": "https://patchwork.kernel.org/api/1.1/series/361485/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361485", "date": "2020-10-08T14:08:57", "name": "bpf: New approach for BPF MTU handling", "version": 3, "mbox": "https://patchwork.kernel.org/series/361485/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11823029/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11823029/checks/", "tags": {}, "headers": {"Return-Path": "<SRS0=0bGE=DP=vger.kernel.org=bpf-owner@kernel.org>", "X-Spam-Checker-Version": "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org", "X-Spam-Level": "", "X-Spam-Status": "No, score=-9.9 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,\n\tDKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,\n\tINCLUDES_PATCH,MAILING_LIST_MULTI,SIGNED_OFF_BY,SPF_HELO_NONE,SPF_PASS\n\tautolearn=unavailable autolearn_force=no version=3.4.0", "Received": ["from mail.kernel.org (mail.kernel.org [198.145.29.99])\n\tby smtp.lore.kernel.org (Postfix) with ESMTP id DB443C4363C\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 14:09:44 +0000 (UTC)", "from vger.kernel.org (vger.kernel.org [23.128.96.18])\n\tby mail.kernel.org (Postfix) with ESMTP id 9B81921D41\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 14:09:44 +0000 (UTC)", "(majordomo@vger.kernel.org) by vger.kernel.org via listexpand\n        id S1730519AbgJHOJn (ORCPT <rfc822;bpf@archiver.kernel.org>);\n        Thu, 8 Oct 2020 10:09:43 -0400", "from us-smtp-delivery-124.mimecast.com ([63.128.21.124]:54161 \"EHLO\n        us-smtp-delivery-124.mimecast.com\" rhost-flags-OK-OK-OK-OK)\n        by vger.kernel.org with ESMTP id S1730511AbgJHOJd (ORCPT\n        <rfc822;bpf@vger.kernel.org>); Thu, 8 Oct 2020 10:09:33 -0400", "from mimecast-mx01.redhat.com (mimecast-mx01.redhat.com\n [209.132.183.4]) (Using TLS) by relay.mimecast.com with ESMTP id\n us-mta-334-2wUimDCZPtmFkDnHPv9tEQ-1; Thu, 08 Oct 2020 10:09:28 -0400", "from smtp.corp.redhat.com (int-mx04.intmail.prod.int.phx2.redhat.com\n [10.5.11.14])\n        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))\n        (No client certificate requested)\n        by mimecast-mx01.redhat.com (Postfix) with ESMTPS id C6A8080401A;\n        Thu,  8 Oct 2020 14:09:26 +0000 (UTC)", "from firesoul.localdomain (unknown [10.40.208.18])\n        by smtp.corp.redhat.com (Postfix) with ESMTP id D81465D9E8;\n        Thu,  8 Oct 2020 14:09:23 +0000 (UTC)", "from [192.168.42.3] (localhost [IPv6:::1])\n        by firesoul.localdomain (Postfix) with ESMTP id CE60230736C8B;\n        Thu,  8 Oct 2020 16:09:22 +0200 (CEST)"], "Authentication-Results": "mail.kernel.org;\n\tdkim=pass (1024-bit key) header.d=redhat.com header.i=@redhat.com\n header.b=\"Sb9EYBof\"", "DKIM-Signature": "v=1; a=rsa-sha256; c=relaxed/relaxed; d=redhat.com;\n        s=mimecast20190719; t=1602166172;\n        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:\n         to:to:cc:cc:mime-version:mime-version:content-type:content-type:\n         content-transfer-encoding:content-transfer-encoding:\n         in-reply-to:in-reply-to:references:references;\n        bh=c8MAr+gO5Pb8hieZ2zNwB6Q2C986gSFsUXCfz+LTfMo=;\n        b=Sb9EYBof0hb/1Gm6utPM0tBenmokiZu6BiOZlXId26HdRZzy3VZVRIvEv2DYTnbDYoeYOZ\n        m7QOCh13dLTtJfs2R5MEX+KLYFG+mjL/bOMkR1/OzpDapJd0lW49bd9zcA38j/5ikymetJ\n        23Mx3cJB4J07V5V7BcjAHbdRDIRIXjg=", "X-MC-Unique": "2wUimDCZPtmFkDnHPv9tEQ-1", "Subject": "[PATCH bpf-next V3 5/6] bpf: drop MTU check when doing TC-BPF\n redirect to ingress", "From": "Jesper Dangaard Brouer <brouer@redhat.com>", "To": "bpf@vger.kernel.org", "Cc": "Jesper Dangaard Brouer <brouer@redhat.com>, netdev@vger.kernel.org,\n        Daniel Borkmann <borkmann@iogearbox.net>,\n        Alexei Starovoitov <alexei.starovoitov@gmail.com>,\n        maze@google.com, lmb@cloudflare.com, shaun@tigera.io,\n        Lorenzo Bianconi <lorenzo@kernel.org>, marek@cloudflare.com,\n        John Fastabend <john.fastabend@gmail.com>,\n        Jakub Kicinski <kuba@kernel.org>, eyal.birger@gmail.com", "Date": "Thu, 08 Oct 2020 16:09:22 +0200", "Message-ID": "<160216616276.882446.17894852306425732310.stgit@firesoul>", "In-Reply-To": "<160216609656.882446.16642490462568561112.stgit@firesoul>", "References": "<160216609656.882446.16642490462568561112.stgit@firesoul>", "User-Agent": "StGit/0.19", "MIME-Version": "1.0", "Content-Type": "text/plain; charset=\"utf-8\"", "Content-Transfer-Encoding": "7bit", "X-Scanned-By": "MIMEDefang 2.79 on 10.5.11.14", "Precedence": "bulk", "List-ID": "<bpf.vger.kernel.org>", "X-Mailing-List": "bpf@vger.kernel.org"}, "content": "The use-case for dropping the MTU check when TC-BPF does redirect to\ningress, is described by Eyal Birger in email[0]. The summary is the\nability to increase packet size (e.g. with IPv6 headers for NAT64) and\ningress redirect packet and let normal netstack fragment packet as needed.\n\n[0] https://lore.kernel.org/netdev/CAHsH6Gug-hsLGHQ6N0wtixdOa85LDZ3HNRHVd0opR=19Qo4W4Q@mail.gmail.com/\n\nSigned-off-by: Jesper Dangaard Brouer <brouer@redhat.com>\n---\n include/linux/netdevice.h |    5 +++--\n net/core/dev.c            |    2 +-\n net/core/filter.c         |   12 ++++++++++--\n 3 files changed, 14 insertions(+), 5 deletions(-)", "diff": "diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h\nindex 28cfa53daf72..58fb7b4869ba 100644\n--- a/include/linux/netdevice.h\n+++ b/include/linux/netdevice.h\n@@ -3866,10 +3866,11 @@ bool is_skb_forwardable(const struct net_device *dev,\n \t\t\tconst struct sk_buff *skb);\n \n static __always_inline int ____dev_forward_skb(struct net_device *dev,\n-\t\t\t\t\t       struct sk_buff *skb)\n+\t\t\t\t\t       struct sk_buff *skb,\n+\t\t\t\t\t       const bool mtu_check)\n {\n \tif (skb_orphan_frags(skb, GFP_ATOMIC) ||\n-\t    unlikely(!is_skb_forwardable(dev, skb))) {\n+\t    (mtu_check && unlikely(!is_skb_forwardable(dev, skb)))) {\n \t\tatomic_long_inc(&dev->rx_dropped);\n \t\tkfree_skb(skb);\n \t\treturn NET_RX_DROP;\ndiff --git a/net/core/dev.c b/net/core/dev.c\nindex b433098896b2..96b455f15872 100644\n--- a/net/core/dev.c\n+++ b/net/core/dev.c\n@@ -2209,7 +2209,7 @@ EXPORT_SYMBOL_GPL(is_skb_forwardable);\n \n int __dev_forward_skb(struct net_device *dev, struct sk_buff *skb)\n {\n-\tint ret = ____dev_forward_skb(dev, skb);\n+\tint ret = ____dev_forward_skb(dev, skb, true);\n \n \tif (likely(!ret)) {\n \t\tskb->protocol = eth_type_trans(skb, dev);\ndiff --git a/net/core/filter.c b/net/core/filter.c\nindex 5986156e700e..a8e24092e4f5 100644\n--- a/net/core/filter.c\n+++ b/net/core/filter.c\n@@ -2083,13 +2083,21 @@ static const struct bpf_func_proto bpf_csum_level_proto = {\n \n static inline int __bpf_rx_skb(struct net_device *dev, struct sk_buff *skb)\n {\n-\treturn dev_forward_skb(dev, skb);\n+\tint ret = ____dev_forward_skb(dev, skb, false);\n+\n+\tif (likely(!ret)) {\n+\t\tskb->protocol = eth_type_trans(skb, dev);\n+\t\tskb_postpull_rcsum(skb, eth_hdr(skb), ETH_HLEN);\n+\t\tret = netif_rx(skb);\n+\t}\n+\n+\treturn ret;\n }\n \n static inline int __bpf_rx_skb_no_mac(struct net_device *dev,\n \t\t\t\t      struct sk_buff *skb)\n {\n-\tint ret = ____dev_forward_skb(dev, skb);\n+\tint ret = ____dev_forward_skb(dev, skb, false);\n \n \tif (likely(!ret)) {\n \t\tskb->dev = dev;\n", "prefixes": ["bpf-next", "V3", "5/6"]}, "patches/11823027/": {"id": 11823027, "url": "https://patchwork.kernel.org/api/1.1/patches/11823027/", "web_url": "https://patchwork.kernel.org/patch/11823027/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<160216616785.882446.3058399056188507434.stgit@firesoul>", "date": "2020-10-08T14:09:27", "name": "[bpf-next,V3,6/6] net: inline and splitup is_skb_forwardable", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "67e18d197cde8bcef64c04c24b2496ab85ca6f51", "submitter": {"id": 58441, "url": "https://patchwork.kernel.org/api/1.1/people/58441/", "name": "Jesper Dangaard Brouer", "email": "brouer@redhat.com"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11823027/mbox/", "series": [{"id": 361485, "url": "https://patchwork.kernel.org/api/1.1/series/361485/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361485", "date": "2020-10-08T14:08:57", "name": "bpf: New approach for BPF MTU handling", "version": 3, "mbox": "https://patchwork.kernel.org/series/361485/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11823027/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11823027/checks/", "tags": {}, "headers": {"Return-Path": "<SRS0=0bGE=DP=vger.kernel.org=bpf-owner@kernel.org>", "X-Spam-Checker-Version": "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org", "X-Spam-Level": "", "X-Spam-Status": "No, score=-9.9 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,\n\tDKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,\n\tINCLUDES_PATCH,MAILING_LIST_MULTI,SIGNED_OFF_BY,SPF_HELO_NONE,SPF_PASS\n\tautolearn=ham autolearn_force=no version=3.4.0", "Received": ["from mail.kernel.org (mail.kernel.org [198.145.29.99])\n\tby smtp.lore.kernel.org (Postfix) with ESMTP id 3C1B1C4363A\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 14:09:44 +0000 (UTC)", "from vger.kernel.org (vger.kernel.org [23.128.96.18])\n\tby mail.kernel.org (Postfix) with ESMTP id E0B5D21897\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 14:09:43 +0000 (UTC)", "(majordomo@vger.kernel.org) by vger.kernel.org via listexpand\n        id S1730520AbgJHOJn (ORCPT <rfc822;bpf@archiver.kernel.org>);\n        Thu, 8 Oct 2020 10:09:43 -0400", "from us-smtp-delivery-124.mimecast.com ([63.128.21.124]:60353 \"EHLO\n        us-smtp-delivery-124.mimecast.com\" rhost-flags-OK-OK-OK-OK)\n        by vger.kernel.org with ESMTP id S1730518AbgJHOJj (ORCPT\n        <rfc822;bpf@vger.kernel.org>); Thu, 8 Oct 2020 10:09:39 -0400", "from mimecast-mx01.redhat.com (mimecast-mx01.redhat.com\n [209.132.183.4]) (Using TLS) by relay.mimecast.com with ESMTP id\n us-mta-414-zNhDG5Z2O_CA2BDK9_zNpA-1; Thu, 08 Oct 2020 10:09:33 -0400", "from smtp.corp.redhat.com (int-mx05.intmail.prod.int.phx2.redhat.com\n [10.5.11.15])\n        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))\n        (No client certificate requested)\n        by mimecast-mx01.redhat.com (Postfix) with ESMTPS id CA0C4804018;\n        Thu,  8 Oct 2020 14:09:31 +0000 (UTC)", "from firesoul.localdomain (unknown [10.40.208.18])\n        by smtp.corp.redhat.com (Postfix) with ESMTP id D42CD55768;\n        Thu,  8 Oct 2020 14:09:28 +0000 (UTC)", "from [192.168.42.3] (localhost [IPv6:::1])\n        by firesoul.localdomain (Postfix) with ESMTP id E58A730736C8B;\n        Thu,  8 Oct 2020 16:09:27 +0200 (CEST)"], "Authentication-Results": "mail.kernel.org;\n\tdkim=pass (1024-bit key) header.d=redhat.com header.i=@redhat.com\n header.b=\"VMRJ8zTP\"", "DKIM-Signature": "v=1; a=rsa-sha256; c=relaxed/relaxed; d=redhat.com;\n        s=mimecast20190719; t=1602166177;\n        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:\n         to:to:cc:cc:mime-version:mime-version:content-type:content-type:\n         content-transfer-encoding:content-transfer-encoding:\n         in-reply-to:in-reply-to:references:references;\n        bh=32w48iMNGkmD+it7eg91axPb7iDFt5xqhVL3TNeV8g4=;\n        b=VMRJ8zTPtzzzH12RTc67hGLxpA2Sb+5OUbLveOB0DIAEeoEsaXjh9Fs/nf7OtdnIJIsWWp\n        1R49ef8DlShjDzb4owKdCvpCfZrD87FE9r4LRq+UPe8RfzyAAv+B0RvjG0zgKGUJx/dR1Z\n        7rKvZ1u5jDDSonZ8t4C6Iq2cHS8ccDI=", "X-MC-Unique": "zNhDG5Z2O_CA2BDK9_zNpA-1", "Subject": "[PATCH bpf-next V3 6/6] net: inline and splitup is_skb_forwardable", "From": "Jesper Dangaard Brouer <brouer@redhat.com>", "To": "bpf@vger.kernel.org", "Cc": "Jesper Dangaard Brouer <brouer@redhat.com>, netdev@vger.kernel.org,\n        Daniel Borkmann <borkmann@iogearbox.net>,\n        Alexei Starovoitov <alexei.starovoitov@gmail.com>,\n        maze@google.com, lmb@cloudflare.com, shaun@tigera.io,\n        Lorenzo Bianconi <lorenzo@kernel.org>, marek@cloudflare.com,\n        John Fastabend <john.fastabend@gmail.com>,\n        Jakub Kicinski <kuba@kernel.org>, eyal.birger@gmail.com", "Date": "Thu, 08 Oct 2020 16:09:27 +0200", "Message-ID": "<160216616785.882446.3058399056188507434.stgit@firesoul>", "In-Reply-To": "<160216609656.882446.16642490462568561112.stgit@firesoul>", "References": "<160216609656.882446.16642490462568561112.stgit@firesoul>", "User-Agent": "StGit/0.19", "MIME-Version": "1.0", "Content-Type": "text/plain; charset=\"utf-8\"", "Content-Transfer-Encoding": "7bit", "X-Scanned-By": "MIMEDefang 2.79 on 10.5.11.15", "Precedence": "bulk", "List-ID": "<bpf.vger.kernel.org>", "X-Mailing-List": "bpf@vger.kernel.org"}, "content": "The BPF-helper bpf_skb_fib_lookup() use is_skb_forwardable() that\nalso checks if net_device is \"up\", which is unnecessary for this\nhelper. This patch splitup is_skb_forwardable() into is_skb_fwd_size_ok()\nsuch that the helper can use this instead.\n\nThis change also cause is_skb_forwardable() to be inlined in the\nexisting call sites. Most importantly in dev_forward_skb().\n\nSigned-off-by: Jesper Dangaard Brouer <brouer@redhat.com>\n---\n include/linux/netdevice.h |   27 +++++++++++++++++++++++++--\n net/core/dev.c            |   21 ---------------------\n net/core/filter.c         |    2 +-\n 3 files changed, 26 insertions(+), 24 deletions(-)", "diff": "diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h\nindex 58fb7b4869ba..4857c54590b5 100644\n--- a/include/linux/netdevice.h\n+++ b/include/linux/netdevice.h\n@@ -3862,8 +3862,31 @@ int xdp_umem_query(struct net_device *dev, u16 queue_id);\n \n int __dev_forward_skb(struct net_device *dev, struct sk_buff *skb);\n int dev_forward_skb(struct net_device *dev, struct sk_buff *skb);\n-bool is_skb_forwardable(const struct net_device *dev,\n-\t\t\tconst struct sk_buff *skb);\n+\n+static __always_inline bool is_skb_fwd_size_ok(const struct net_device *dev,\n+\t\t\t\t\t       const struct sk_buff *skb)\n+{\n+\tconst u32 vlan_hdr_len = 4; /* VLAN_HLEN */\n+\tunsigned int mtu = dev->mtu + dev->hard_header_len + vlan_hdr_len;\n+\n+\t/* Assumes SKB length at L2 */\n+\tif (likely(skb->len <= mtu))\n+\t\treturn true;\n+\n+\t/* If TSO is enabled, we don't care about the length as the packet\n+\t * could be forwarded without being segmented before.\n+\t */\n+\treturn skb_is_gso(skb);\n+}\n+\n+static __always_inline bool is_skb_forwardable(const struct net_device *dev,\n+\t\t\t\t\t       const struct sk_buff *skb)\n+{\n+\tif (unlikely(!(dev->flags & IFF_UP)))\n+\t\treturn false;\n+\n+\treturn is_skb_fwd_size_ok(dev, skb);\n+}\n \n static __always_inline int ____dev_forward_skb(struct net_device *dev,\n \t\t\t\t\t       struct sk_buff *skb,\ndiff --git a/net/core/dev.c b/net/core/dev.c\nindex 96b455f15872..21b62bda0ef9 100644\n--- a/net/core/dev.c\n+++ b/net/core/dev.c\n@@ -2186,27 +2186,6 @@ static inline void net_timestamp_set(struct sk_buff *skb)\n \t\t\t__net_timestamp(SKB);\t\t\t\\\n \t}\t\t\t\t\t\t\t\\\n \n-bool is_skb_forwardable(const struct net_device *dev, const struct sk_buff *skb)\n-{\n-\tunsigned int len;\n-\n-\tif (!(dev->flags & IFF_UP))\n-\t\treturn false;\n-\n-\tlen = dev->mtu + dev->hard_header_len + VLAN_HLEN;\n-\tif (skb->len <= len)\n-\t\treturn true;\n-\n-\t/* if TSO is enabled, we don't care about the length as the packet\n-\t * could be forwarded without being segmented before\n-\t */\n-\tif (skb_is_gso(skb))\n-\t\treturn true;\n-\n-\treturn false;\n-}\n-EXPORT_SYMBOL_GPL(is_skb_forwardable);\n-\n int __dev_forward_skb(struct net_device *dev, struct sk_buff *skb)\n {\n \tint ret = ____dev_forward_skb(dev, skb, true);\ndiff --git a/net/core/filter.c b/net/core/filter.c\nindex a8e24092e4f5..14e6b93757d4 100644\n--- a/net/core/filter.c\n+++ b/net/core/filter.c\n@@ -5502,7 +5502,7 @@ BPF_CALL_4(bpf_skb_fib_lookup, struct sk_buff *, skb,\n \t\tstruct net_device *dev;\n \n \t\tdev = dev_get_by_index_rcu(net, params->ifindex);\n-\t\tif (!is_skb_forwardable(dev, skb))\n+\t\tif (!is_skb_fwd_size_ok(dev, skb))\n \t\t\trc = BPF_FIB_LKUP_RET_FRAG_NEEDED;\n \n \t\tparams->mtu = dev->mtu; /* union with tot_len */\n", "prefixes": ["bpf-next", "V3", "6/6"]}, "series/?q= bpf_fib_lookup: return target ifindex even if neighbour lookup fails&": [{"id": 361531, "url": "https://patchwork.kernel.org/api/1.1/series/361531/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361531", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "name": "[bpf-next] bpf_fib_lookup: return target ifindex even if neighbour lookup fails", "date": "2020-10-08T14:53:14", "submitter": {"id": 184429, "url": "https://patchwork.kernel.org/api/1.1/people/184429/", "name": "Toke H\u00f8iland-J\u00f8rgensen", "email": "toke@redhat.com"}, "version": 1, "total": 1, "received_total": 1, "received_all": true, "mbox": "https://patchwork.kernel.org/series/361531/mbox/", "cover_letter": null, "patches": [{"id": 11823135, "url": "https://patchwork.kernel.org/api/1.1/patches/11823135/", "web_url": "https://patchwork.kernel.org/patch/11823135/", "msgid": "<20201008145314.116800-1-toke@redhat.com>", "date": "2020-10-08T14:53:14", "name": "[bpf-next] bpf_fib_lookup: return target ifindex even if neighbour lookup fails", "mbox": "https://patchwork.kernel.org/patch/11823135/mbox/"}]}], "patches/11823135/": {"id": 11823135, "url": "https://patchwork.kernel.org/api/1.1/patches/11823135/", "web_url": "https://patchwork.kernel.org/patch/11823135/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<20201008145314.116800-1-toke@redhat.com>", "date": "2020-10-08T14:53:14", "name": "[bpf-next] bpf_fib_lookup: return target ifindex even if neighbour lookup fails", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "03475c7e9fe63b41461ac98ce27c266215ac94d3", "submitter": {"id": 184429, "url": "https://patchwork.kernel.org/api/1.1/people/184429/", "name": "Toke H\u00f8iland-J\u00f8rgensen", "email": "toke@redhat.com"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11823135/mbox/", "series": [{"id": 361531, "url": "https://patchwork.kernel.org/api/1.1/series/361531/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361531", "date": "2020-10-08T14:53:14", "name": "[bpf-next] bpf_fib_lookup: return target ifindex even if neighbour lookup fails", "version": 1, "mbox": "https://patchwork.kernel.org/series/361531/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11823135/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11823135/checks/", "tags": {}, "headers": {"Return-Path": "<SRS0=0bGE=DP=vger.kernel.org=bpf-owner@kernel.org>", "X-Spam-Checker-Version": "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org", "X-Spam-Level": "", "X-Spam-Status": "No, score=-12.9 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,\n\tDKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,\n\tINCLUDES_PATCH,MAILING_LIST_MULTI,SIGNED_OFF_BY,SPF_HELO_NONE,SPF_PASS,\n\tUSER_AGENT_GIT autolearn=ham autolearn_force=no version=3.4.0", "Received": ["from mail.kernel.org (mail.kernel.org [198.145.29.99])\n\tby smtp.lore.kernel.org (Postfix) with ESMTP id 2D447C4363A\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 14:55:05 +0000 (UTC)", "from vger.kernel.org (vger.kernel.org [23.128.96.18])\n\tby mail.kernel.org (Postfix) with ESMTP id C2DB121927\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 14:55:04 +0000 (UTC)", "(majordomo@vger.kernel.org) by vger.kernel.org via listexpand\n        id S1730538AbgJHOzE (ORCPT <rfc822;bpf@archiver.kernel.org>);\n        Thu, 8 Oct 2020 10:55:04 -0400", "from us-smtp-delivery-124.mimecast.com ([216.205.24.124]:56890 \"EHLO\n        us-smtp-delivery-124.mimecast.com\" rhost-flags-OK-OK-OK-OK)\n        by vger.kernel.org with ESMTP id S1730550AbgJHOzD (ORCPT\n        <rfc822;bpf@vger.kernel.org>); Thu, 8 Oct 2020 10:55:03 -0400", "from mail-wr1-f70.google.com (mail-wr1-f70.google.com\n [209.85.221.70]) (Using TLS) by relay.mimecast.com with ESMTP id\n us-mta-185-2_Dw4LExNDOqxt13eE2q_g-1; Thu, 08 Oct 2020 10:55:00 -0400", "by mail-wr1-f70.google.com with SMTP id l15so3995494wro.10\n        for <bpf@vger.kernel.org>; Thu, 08 Oct 2020 07:55:00 -0700 (PDT)", "from alrua-x1.borgediget.toke.dk ([45.145.92.2])\n        by smtp.gmail.com with ESMTPSA id\n h4sm7669509wrv.11.2020.10.08.07.54.58\n        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);\n        Thu, 08 Oct 2020 07:54:58 -0700 (PDT)", "by alrua-x1.borgediget.toke.dk (Postfix, from userid 1000)\n        id B72561837DC; Thu,  8 Oct 2020 16:54:56 +0200 (CEST)"], "Authentication-Results": "mail.kernel.org;\n\tdkim=pass (1024-bit key) header.d=redhat.com header.i=@redhat.com\n header.b=\"E3vLNX12\"", "DKIM-Signature": "v=1; a=rsa-sha256; c=relaxed/relaxed; d=redhat.com;\n        s=mimecast20190719; t=1602168902;\n        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:\n         to:to:cc:cc:mime-version:mime-version:content-type:content-type:\n         content-transfer-encoding:content-transfer-encoding;\n        bh=8vBAvmA9VVkjQaQOIV4tKX06blikqMqTAqSZ4A68NBY=;\n        b=E3vLNX12OWtH3698zUuXgcu5/7G1w3qmFzZQHYRXvsdX4SygD0wsdAGC00955iDzfQ1MLg\n        2BnVP1QWdd/9IHZh+R2ZVDdaYHWLCtVPZdkCrzXleNxq3zsSaN0exBURxMea/OpE0tPKMX\n        2pN1KRC7CTmAJLmLPmgaqkgQKNDu6Ak=", "X-MC-Unique": "2_Dw4LExNDOqxt13eE2q_g-1", "X-Google-DKIM-Signature": "v=1; a=rsa-sha256; c=relaxed/relaxed;\n        d=1e100.net; s=20161025;\n        h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version\n         :content-transfer-encoding;\n        bh=8vBAvmA9VVkjQaQOIV4tKX06blikqMqTAqSZ4A68NBY=;\n        b=dd7ZpmH0ZICGpVeQ+8Znr9RU8x9cxwQyTIVbmfwpK1S/v4WQGvDFeGq+7vEBpEuL3J\n         2kjX+cFQ+pE0mCeA0EAMmL6wDqmrOAhKe3EHHs/nh4a3HFSNeZakYqF2G+aaqwZ8Czuj\n         oqSnDBqEErbq0kjhTXZv/Y1vw4PeXxXvpIBFEWPqW5CfrBCHsSwlZRokxz38Oc3Q7XF6\n         wFOEbtxdJt5vs4Cp+ahAVNHnP+x13bOOXJKND8TKkOy4tYqdwd/MqE3SyBaHDC38ow1s\n         1P1vOycflTqbzLnslWo/6bXv1FVgiASwpSm7P5L6hTdk78qdspNzr5qFw/SDs9SQFKA8\n         LwLg==", "X-Gm-Message-State": "AOAM530k9l6VN9ecsSxwPVc6fGwjlwcbvyDjBbCmtCGDJrOejgnA3WGV\n        kUy0bWY00tXwnHqP7uj2s+nwEdTihR5XQjCf3P/DuccEw9GhBwP2CQn64VJx9fmdK2d5/4vQNVi\n        /3EKQjvlqxN2Y", "X-Received": ["by 2002:adf:93e5:: with SMTP id 92mr9474008wrp.31.1602168899151;\n        Thu, 08 Oct 2020 07:54:59 -0700 (PDT)", "by 2002:adf:93e5:: with SMTP id 92mr9473981wrp.31.1602168898893;\n        Thu, 08 Oct 2020 07:54:58 -0700 (PDT)"], "X-Google-Smtp-Source": "\n ABdhPJxPlSxYXyvusTZl4I7WqRB2oLECEai0MOCdZ97k1p83lq+jHpkyBXtT7k7kAHJjmMxLoV7FRA==", "From": "=?utf-8?q?Toke_H=C3=B8iland-J=C3=B8rgensen?= <toke@redhat.com>", "To": "daniel@iogearbox.net, ast@fb.com", "Cc": "=?utf-8?q?Toke_H=C3=B8iland-J=C3=B8rgensen?= <toke@redhat.com>,\n bpf@vger.kernel.org, netdev@vger.kernel.org, David Ahern <dsahern@gmail.com>", "Subject": "[PATCH bpf-next] bpf_fib_lookup: return target ifindex even if\n neighbour lookup fails", "Date": "Thu,  8 Oct 2020 16:53:14 +0200", "Message-Id": "<20201008145314.116800-1-toke@redhat.com>", "X-Mailer": "git-send-email 2.28.0", "MIME-Version": "1.0", "Content-Type": "text/plain; charset=UTF-8", "Content-Transfer-Encoding": "8bit", "Precedence": "bulk", "List-ID": "<bpf.vger.kernel.org>", "X-Mailing-List": "bpf@vger.kernel.org"}, "content": "The bpf_fib_lookup() helper performs a neighbour lookup for the destination\nIP and returns BPF_FIB_LKUP_NO_NEIGH if this fails, with the expectation\nthat the BPF program will pass the packet up the stack in this case.\nHowever, with the addition of bpf_redirect_neigh() that can be used instead\nto perform the neighbour lookup.\n\nHowever, for that we still need the target ifindex, and since\nbpf_fib_lookup() already has that at the time it performs the neighbour\nlookup, there is really no reason why it can't just return it in any case.\nWith this fix, a BPF program can do the following to perform a redirect\nbased on the routing table that will succeed even if there is no neighbour\nentry:\n\n\tret = bpf_fib_lookup(skb, &fib_params, sizeof(fib_params), 0);\n\tif (ret == BPF_FIB_LKUP_RET_SUCCESS) {\n\t\t__builtin_memcpy(eth->h_dest, fib_params.dmac, ETH_ALEN);\n\t\t__builtin_memcpy(eth->h_source, fib_params.smac, ETH_ALEN);\n\n\t\treturn bpf_redirect(fib_params.ifindex, 0);\n\t} else if (ret == BPF_FIB_LKUP_RET_NO_NEIGH) {\n\t\treturn bpf_redirect_neigh(fib_params.ifindex, 0);\n\t}\n\nCc: David Ahern <dsahern@gmail.com>\nSigned-off-by: Toke H\u00f8iland-J\u00f8rgensen <toke@redhat.com>\n---\n net/core/filter.c | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)", "diff": "diff --git a/net/core/filter.c b/net/core/filter.c\nindex 05df73780dd3..00fce34a2204 100644\n--- a/net/core/filter.c\n+++ b/net/core/filter.c\n@@ -5192,7 +5192,6 @@ static int bpf_fib_set_fwd_params(struct bpf_fib_lookup *params,\n \tmemcpy(params->smac, dev->dev_addr, ETH_ALEN);\n \tparams->h_vlan_TCI = 0;\n \tparams->h_vlan_proto = 0;\n-\tparams->ifindex = dev->ifindex;\n \n \treturn 0;\n }\n@@ -5289,6 +5288,7 @@ static int bpf_ipv4_fib_lookup(struct net *net, struct bpf_fib_lookup *params,\n \tdev = nhc->nhc_dev;\n \n \tparams->rt_metric = res.fi->fib_priority;\n+\tparams->ifindex = dev->ifindex;\n \n \t/* xdp and cls_bpf programs are run in RCU-bh so\n \t * rcu_read_lock_bh is not needed here\n@@ -5414,6 +5414,7 @@ static int bpf_ipv6_fib_lookup(struct net *net, struct bpf_fib_lookup *params,\n \n \tdev = res.nh->fib_nh_dev;\n \tparams->rt_metric = res.f6i->fib6_metric;\n+\tparams->ifindex = dev->ifindex;\n \n \t/* xdp and cls_bpf programs are run in RCU-bh so rcu_read_lock_bh is\n \t * not needed here.\n", "prefixes": ["bpf-next"]}, "series/?q= xsk: introduce padding between ring pointers&": [{"id": 361491, "url": "https://patchwork.kernel.org/api/1.1/series/361491/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361491", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "name": "[bpf-next] xsk: introduce padding between ring pointers", "date": "2020-10-08T14:12:18", "submitter": {"id": 187703, "url": "https://patchwork.kernel.org/api/1.1/people/187703/", "name": "Magnus Karlsson", "email": "magnus.karlsson@gmail.com"}, "version": 1, "total": 1, "received_total": 1, "received_all": true, "mbox": "https://patchwork.kernel.org/series/361491/mbox/", "cover_letter": null, "patches": [{"id": 11823049, "url": "https://patchwork.kernel.org/api/1.1/patches/11823049/", "web_url": "https://patchwork.kernel.org/patch/11823049/", "msgid": "<1602166338-21378-1-git-send-email-magnus.karlsson@gmail.com>", "date": "2020-10-08T14:12:18", "name": "[bpf-next] xsk: introduce padding between ring pointers", "mbox": "https://patchwork.kernel.org/patch/11823049/mbox/"}]}], "patches/11823049/": {"id": 11823049, "url": "https://patchwork.kernel.org/api/1.1/patches/11823049/", "web_url": "https://patchwork.kernel.org/patch/11823049/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<1602166338-21378-1-git-send-email-magnus.karlsson@gmail.com>", "date": "2020-10-08T14:12:18", "name": "[bpf-next] xsk: introduce padding between ring pointers", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "ff707b970d379f743b1c2ccbcf0e1cf2a8f9526c", "submitter": {"id": 187703, "url": "https://patchwork.kernel.org/api/1.1/people/187703/", "name": "Magnus Karlsson", "email": "magnus.karlsson@gmail.com"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11823049/mbox/", "series": [{"id": 361491, "url": "https://patchwork.kernel.org/api/1.1/series/361491/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361491", "date": "2020-10-08T14:12:18", "name": "[bpf-next] xsk: introduce padding between ring pointers", "version": 1, "mbox": "https://patchwork.kernel.org/series/361491/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11823049/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11823049/checks/", "tags": {}, "headers": {"Return-Path": "<SRS0=0bGE=DP=vger.kernel.org=bpf-owner@kernel.org>", "X-Spam-Checker-Version": "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org", "X-Spam-Level": "", "X-Spam-Status": "No, score=-12.8 required=3.0 tests=BAYES_00,DKIM_SIGNED,\n\tDKIM_VALID,DKIM_VALID_AU,FREEMAIL_FORGED_FROMDOMAIN,FREEMAIL_FROM,\n\tHEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_PATCH,MAILING_LIST_MULTI,SIGNED_OFF_BY,\n\tSPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED,USER_AGENT_GIT autolearn=unavailable\n\tautolearn_force=no version=3.4.0", "Received": ["from mail.kernel.org (mail.kernel.org [198.145.29.99])\n\tby smtp.lore.kernel.org (Postfix) with ESMTP id 1EA1CC4363A\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 14:12:42 +0000 (UTC)", "from vger.kernel.org (vger.kernel.org [23.128.96.18])\n\tby mail.kernel.org (Postfix) with ESMTP id AF71021897\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 14:12:41 +0000 (UTC)", "(majordomo@vger.kernel.org) by vger.kernel.org via listexpand\n        id S1730346AbgJHOMl (ORCPT <rfc822;bpf@archiver.kernel.org>);\n        Thu, 8 Oct 2020 10:12:41 -0400", "from lindbergh.monkeyblade.net ([23.128.96.19]:54044 \"EHLO\n        lindbergh.monkeyblade.net\" rhost-flags-OK-OK-OK-OK) by vger.kernel.org\n        with ESMTP id S1730319AbgJHOMl (ORCPT <rfc822;bpf@vger.kernel.org>);\n        Thu, 8 Oct 2020 10:12:41 -0400", "from mail-pl1-x641.google.com (mail-pl1-x641.google.com\n [IPv6:2607:f8b0:4864:20::641])\n        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 24020C061755;\n        Thu,  8 Oct 2020 07:12:41 -0700 (PDT)", "by mail-pl1-x641.google.com with SMTP id w21so68690plq.3;\n        Thu, 08 Oct 2020 07:12:41 -0700 (PDT)", "from localhost.localdomain (fmdmzpr03-ext.fm.intel.com.\n [192.55.54.38])\n        by smtp.gmail.com with ESMTPSA id\n ne16sm7356811pjb.11.2020.10.08.07.12.37\n        (version=TLS1_2 cipher=ECDHE-ECDSA-AES128-GCM-SHA256 bits=128/128);\n        Thu, 08 Oct 2020 07:12:40 -0700 (PDT)"], "Authentication-Results": "mail.kernel.org;\n\tdkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com\n header.b=\"ArvgXq0q\"", "DKIM-Signature": "v=1; a=rsa-sha256; c=relaxed/relaxed;\n        d=gmail.com; s=20161025;\n        h=from:to:cc:subject:date:message-id;\n        bh=Mg0NsaEQzdvSh0ImH0acDVC5DgUluqcOLV+Kh6DIKuc=;\n        b=ArvgXq0qpQFqB4D3ihquKaJx9DRs0tUKf7t0+6kkbKVGXsBXgsZemb6gF8F+1kWD7K\n         1MnzZJfchRIcdz3C6T0sR/SrbcotU2FFWQntS1waiM1aSu53QojRwleA84pfafCllkt+\n         Avhmz6ohcV7+VIH3Pg9/X/tg0YcOY2ieiZ5KjCiBrWRZpr+lsh0gjLnFGtjOufjX6tu5\n         6NMLMDB2q+sUJVNRTrBx5CcGKc6Itt9vXkohDCEdgbFURknEQpMc32Z6cw5vwyQUVQVA\n         ARPskEzMj4b1xCMNZY4Ahj8xYPWOr6AaYKr6sYIBIxR3u64lKv5u5yz1mRZqTDKO+7F3\n         D4xw==", "X-Google-DKIM-Signature": "v=1; a=rsa-sha256; c=relaxed/relaxed;\n        d=1e100.net; s=20161025;\n        h=x-gm-message-state:from:to:cc:subject:date:message-id;\n        bh=Mg0NsaEQzdvSh0ImH0acDVC5DgUluqcOLV+Kh6DIKuc=;\n        b=R7WorBXG+GPWkX6KB1mJDdu9NkkbUVukkJjEDtdrVkzPrSDhbJw05OHt2wnOyxEz2k\n         rwPwjCMmBnMin0m/2u1yCgDXhcHuDwZAryL1IIWh9Ul1K9U7V0227UmVAbqgl1cLNPXV\n         3gFaJGpkwY/FhjUGJTCsGIA0OUp33/W8DQAQNxZW46QE8sZqZcnimwR0aP9+fZ0UgrJG\n         k7Xznc6twKYtOqJUdHpi17jcwIueFqBL45MAxPyoxe7P7ZHEaybZZzEBvDmo2niPto8V\n         cBfvtL6LJeCWkNeFHWUrhuBV8zyPXPkLN2nwBIf1YqqxpdnJLnYC17LVLtKAgygcrY/k\n         X4kQ==", "X-Gm-Message-State": "AOAM533jwXSVkAtI+J4aSDvCwqgrSYDbaEufQ++7xplF3PsG51Vc/Qi1\n        kJNMPc8dJjhZiU7FqFCTP7Q=", "X-Google-Smtp-Source": "\n ABdhPJy8zdWPheddoSx3e5JMrSy6LFT9TD9IXXIi1Rn+QmGUfUFb/VeXa/GSWywHILZThV3U9xOYvw==", "X-Received": "by 2002:a17:902:46b:b029:d2:aa9a:847f with SMTP id\n 98-20020a170902046bb02900d2aa9a847fmr7631753ple.24.1602166360747;\n        Thu, 08 Oct 2020 07:12:40 -0700 (PDT)", "From": "Magnus Karlsson <magnus.karlsson@gmail.com>", "To": "magnus.karlsson@intel.com, bjorn.topel@intel.com, ast@kernel.org,\n        daniel@iogearbox.net, netdev@vger.kernel.org,\n        jonathan.lemon@gmail.com", "Cc": "bpf@vger.kernel.org", "Subject": "[PATCH bpf-next] xsk: introduce padding between ring pointers", "Date": "Thu,  8 Oct 2020 16:12:18 +0200", "Message-Id": "<1602166338-21378-1-git-send-email-magnus.karlsson@gmail.com>", "X-Mailer": "git-send-email 2.7.4", "Precedence": "bulk", "List-ID": "<bpf.vger.kernel.org>", "X-Mailing-List": "bpf@vger.kernel.org"}, "content": "From: Magnus Karlsson <magnus.karlsson@intel.com>\n\nIntroduce one cache line worth of padding between the producer and\nconsumer pointers in all the lockless rings. This so that the HW\nadjacency prefetcher will not prefetch the consumer pointer when the\nproducer pointer is used and vice versa. This improves throughput\nperformance for the l2fwd sample app with 2% on my machine with HW\nprefetching turned on.\n\nSigned-off-by: Magnus Karlsson <magnus.karlsson@intel.com>\n---\n net/xdp/xsk_queue.h | 4 ++++\n 1 file changed, 4 insertions(+)", "diff": "diff --git a/net/xdp/xsk_queue.h b/net/xdp/xsk_queue.h\nindex dc1dd5e..3c235d2 100644\n--- a/net/xdp/xsk_queue.h\n+++ b/net/xdp/xsk_queue.h\n@@ -15,6 +15,10 @@\n \n struct xdp_ring {\n \tu32 producer ____cacheline_aligned_in_smp;\n+\t/* Hinder the adjacent cache prefetcher to prefetch the consumer pointer if the producer\n+\t * pointer is touched and vice versa.\n+\t */\n+\tu32 pad ____cacheline_aligned_in_smp;\n \tu32 consumer ____cacheline_aligned_in_smp;\n \tu32 flags;\n };\n", "prefixes": ["bpf-next"]}, "series/?q= bpf: improve bpf_redirect_neigh helper description&": [{"id": 361757, "url": "https://patchwork.kernel.org/api/1.1/series/361757/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361757", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "name": "[bpf-next,1/6] bpf: improve bpf_redirect_neigh helper description", "date": "2020-10-08T21:31:42", "submitter": {"id": 123431, "url": "https://patchwork.kernel.org/api/1.1/people/123431/", "name": "Daniel Borkmann", "email": "daniel@iogearbox.net"}, "version": 1, "total": 6, "received_total": 6, "received_all": true, "mbox": "https://patchwork.kernel.org/series/361757/mbox/", "cover_letter": null, "patches": [{"id": 11824609, "url": "https://patchwork.kernel.org/api/1.1/patches/11824609/", "web_url": "https://patchwork.kernel.org/patch/11824609/", "msgid": "<20201008213148.26848-2-daniel@iogearbox.net>", "date": "2020-10-08T21:31:43", "name": "[bpf-next,1/6] bpf: improve bpf_redirect_neigh helper description", "mbox": "https://patchwork.kernel.org/patch/11824609/mbox/"}, {"id": 11824611, "url": "https://patchwork.kernel.org/api/1.1/patches/11824611/", "web_url": "https://patchwork.kernel.org/patch/11824611/", "msgid": "<20201008213148.26848-3-daniel@iogearbox.net>", "date": "2020-10-08T21:31:44", "name": "[bpf-next,2/6] bpf: add redirect_peer helper", "mbox": "https://patchwork.kernel.org/patch/11824611/mbox/"}, {"id": 11824617, "url": "https://patchwork.kernel.org/api/1.1/patches/11824617/", "web_url": "https://patchwork.kernel.org/patch/11824617/", "msgid": "<20201008213148.26848-4-daniel@iogearbox.net>", "date": "2020-10-08T21:31:45", "name": "[bpf-next,3/6] bpf: allow for map-in-map with dynamic inner array map entries", "mbox": "https://patchwork.kernel.org/patch/11824617/mbox/"}, {"id": 11824619, "url": "https://patchwork.kernel.org/api/1.1/patches/11824619/", "web_url": "https://patchwork.kernel.org/patch/11824619/", "msgid": "<20201008213148.26848-5-daniel@iogearbox.net>", "date": "2020-10-08T21:31:46", "name": "[bpf-next,4/6] bpf, selftests: add test for different array inner map size", "mbox": "https://patchwork.kernel.org/patch/11824619/mbox/"}, {"id": 11824613, "url": "https://patchwork.kernel.org/api/1.1/patches/11824613/", "web_url": "https://patchwork.kernel.org/patch/11824613/", "msgid": "<20201008213148.26848-6-daniel@iogearbox.net>", "date": "2020-10-08T21:31:47", "name": "[bpf-next,5/6] bpf, selftests: make redirect_neigh test more extensible", "mbox": "https://patchwork.kernel.org/patch/11824613/mbox/"}, {"id": 11824615, "url": "https://patchwork.kernel.org/api/1.1/patches/11824615/", "web_url": "https://patchwork.kernel.org/patch/11824615/", "msgid": "<20201008213148.26848-7-daniel@iogearbox.net>", "date": "2020-10-08T21:31:48", "name": "[bpf-next,6/6] bpf, selftests: add redirect_peer selftest", "mbox": "https://patchwork.kernel.org/patch/11824615/mbox/"}]}], "patches/11824609/": {"id": 11824609, "url": "https://patchwork.kernel.org/api/1.1/patches/11824609/", "web_url": "https://patchwork.kernel.org/patch/11824609/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<20201008213148.26848-2-daniel@iogearbox.net>", "date": "2020-10-08T21:31:43", "name": "[bpf-next,1/6] bpf: improve bpf_redirect_neigh helper description", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "772fd28ea5898f2133afbeab79b21c3b275be928", "submitter": {"id": 123431, "url": "https://patchwork.kernel.org/api/1.1/people/123431/", "name": "Daniel Borkmann", "email": "daniel@iogearbox.net"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11824609/mbox/", "series": [{"id": 361757, "url": "https://patchwork.kernel.org/api/1.1/series/361757/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361757", "date": "2020-10-08T21:31:42", "name": "[bpf-next,1/6] bpf: improve bpf_redirect_neigh helper description", "version": 1, "mbox": "https://patchwork.kernel.org/series/361757/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11824609/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11824609/checks/", "tags": {}, "headers": {"Return-Path": "<SRS0=0bGE=DP=vger.kernel.org=bpf-owner@kernel.org>", "X-Spam-Checker-Version": "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org", "X-Spam-Level": "", "X-Spam-Status": "No, score=-12.7 required=3.0 tests=BAYES_00,\n\tHEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_PATCH,MAILING_LIST_MULTI,SIGNED_OFF_BY,\n\tSPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED,USER_AGENT_GIT autolearn=unavailable\n\tautolearn_force=no version=3.4.0", "Received": ["from mail.kernel.org (mail.kernel.org [198.145.29.99])\n\tby smtp.lore.kernel.org (Postfix) with ESMTP id 9CF01C04EBE\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 21:31:55 +0000 (UTC)", "from vger.kernel.org (vger.kernel.org [23.128.96.18])\n\tby mail.kernel.org (Postfix) with ESMTP id 4F2B522248\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 21:31:55 +0000 (UTC)", "(majordomo@vger.kernel.org) by vger.kernel.org via listexpand\n        id S1729319AbgJHVbx (ORCPT <rfc822;bpf@archiver.kernel.org>);\n        Thu, 8 Oct 2020 17:31:53 -0400", "from www62.your-server.de ([213.133.104.62]:46930 \"EHLO\n        www62.your-server.de\" rhost-flags-OK-OK-OK-OK) by vger.kernel.org\n        with ESMTP id S1728202AbgJHVbw (ORCPT <rfc822;bpf@vger.kernel.org>);\n        Thu, 8 Oct 2020 17:31:52 -0400", "from 75.57.196.178.dynamic.wline.res.cust.swisscom.ch\n ([178.196.57.75] helo=localhost)\n        by www62.your-server.de with esmtpsa\n (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)\n        (Exim 4.89_1)\n        (envelope-from <daniel@iogearbox.net>)\n        id 1kQdVu-0007ub-N4; Thu, 08 Oct 2020 23:31:50 +0200"], "From": "Daniel Borkmann <daniel@iogearbox.net>", "To": "ast@kernel.org", "Cc": "daniel@iogearbox.net, john.fastabend@gmail.com,\n        netdev@vger.kernel.org, bpf@vger.kernel.org,\n        David Ahern <dsahern@gmail.com>", "Subject": "[PATCH bpf-next 1/6] bpf: improve bpf_redirect_neigh helper\n description", "Date": "Thu,  8 Oct 2020 23:31:43 +0200", "Message-Id": "<20201008213148.26848-2-daniel@iogearbox.net>", "X-Mailer": "git-send-email 2.21.0", "In-Reply-To": "<20201008213148.26848-1-daniel@iogearbox.net>", "References": "<20201008213148.26848-1-daniel@iogearbox.net>", "MIME-Version": "1.0", "Content-Transfer-Encoding": "8bit", "X-Authenticated-Sender": "daniel@iogearbox.net", "X-Virus-Scanned": "Clear (ClamAV 0.102.4/25951/Thu Oct  8 15:53:03 2020)", "Precedence": "bulk", "List-ID": "<bpf.vger.kernel.org>", "X-Mailing-List": "bpf@vger.kernel.org", "X-Patchwork-Delegate": "bpf@iogearbox.net"}, "content": "Follow-up to address David's feedback that we should better describe internals\nof the bpf_redirect_neigh() helper.\n\nSuggested-by: David Ahern <dsahern@gmail.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\n---\n include/uapi/linux/bpf.h       | 10 +++++++---\n tools/include/uapi/linux/bpf.h | 10 +++++++---\n 2 files changed, 14 insertions(+), 6 deletions(-)", "diff": "diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h\nindex d83561e8cd2c..8e8941535c28 100644\n--- a/include/uapi/linux/bpf.h\n+++ b/include/uapi/linux/bpf.h\n@@ -3679,10 +3679,14 @@ union bpf_attr {\n  * \t\tRedirect the packet to another net device of index *ifindex*\n  * \t\tand fill in L2 addresses from neighboring subsystem. This helper\n  * \t\tis somewhat similar to **bpf_redirect**\\ (), except that it\n- * \t\tfills in e.g. MAC addresses based on the L3 information from\n- * \t\tthe packet. This helper is supported for IPv4 and IPv6 protocols.\n+ * \t\tpopulates L2 addresses as well, meaning, internally, the helper\n+ * \t\tperforms a FIB lookup based on the skb's networking header to\n+ * \t\tget the\taddress of the next hop and then relies on the neighbor\n+ * \t\tlookup for the L2 address of the nexthop.\n+ *\n  * \t\tThe *flags* argument is reserved and must be 0. The helper is\n- * \t\tcurrently only supported for tc BPF program types.\n+ * \t\tcurrently only supported for tc BPF program types, and enabled\n+ * \t\tfor IPv4 and IPv6 protocols.\n  * \tReturn\n  * \t\tThe helper returns **TC_ACT_REDIRECT** on success or\n  * \t\t**TC_ACT_SHOT** on error.\ndiff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h\nindex d83561e8cd2c..8e8941535c28 100644\n--- a/tools/include/uapi/linux/bpf.h\n+++ b/tools/include/uapi/linux/bpf.h\n@@ -3679,10 +3679,14 @@ union bpf_attr {\n  * \t\tRedirect the packet to another net device of index *ifindex*\n  * \t\tand fill in L2 addresses from neighboring subsystem. This helper\n  * \t\tis somewhat similar to **bpf_redirect**\\ (), except that it\n- * \t\tfills in e.g. MAC addresses based on the L3 information from\n- * \t\tthe packet. This helper is supported for IPv4 and IPv6 protocols.\n+ * \t\tpopulates L2 addresses as well, meaning, internally, the helper\n+ * \t\tperforms a FIB lookup based on the skb's networking header to\n+ * \t\tget the\taddress of the next hop and then relies on the neighbor\n+ * \t\tlookup for the L2 address of the nexthop.\n+ *\n  * \t\tThe *flags* argument is reserved and must be 0. The helper is\n- * \t\tcurrently only supported for tc BPF program types.\n+ * \t\tcurrently only supported for tc BPF program types, and enabled\n+ * \t\tfor IPv4 and IPv6 protocols.\n  * \tReturn\n  * \t\tThe helper returns **TC_ACT_REDIRECT** on success or\n  * \t\t**TC_ACT_SHOT** on error.\n", "prefixes": ["bpf-next", "1/6"]}, "patches/11824611/": {"id": 11824611, "url": "https://patchwork.kernel.org/api/1.1/patches/11824611/", "web_url": "https://patchwork.kernel.org/patch/11824611/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<20201008213148.26848-3-daniel@iogearbox.net>", "date": "2020-10-08T21:31:44", "name": "[bpf-next,2/6] bpf: add redirect_peer helper", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "e737fd29310c11c322366ce5d6a930d6d8f0a046", "submitter": {"id": 123431, "url": "https://patchwork.kernel.org/api/1.1/people/123431/", "name": "Daniel Borkmann", "email": "daniel@iogearbox.net"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11824611/mbox/", "series": [{"id": 361757, "url": "https://patchwork.kernel.org/api/1.1/series/361757/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361757", "date": "2020-10-08T21:31:42", "name": "[bpf-next,1/6] bpf: improve bpf_redirect_neigh helper description", "version": 1, "mbox": "https://patchwork.kernel.org/series/361757/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11824611/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11824611/checks/", "tags": {}, "headers": {"Return-Path": "<SRS0=0bGE=DP=vger.kernel.org=bpf-owner@kernel.org>", "X-Spam-Checker-Version": "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org", "X-Spam-Level": "", "X-Spam-Status": "No, score=-17.7 required=3.0 tests=BAYES_00,\n\tHEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_PATCH,MAILING_LIST_MULTI,\n\tMENTIONS_GIT_HOSTING,SIGNED_OFF_BY,SPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED,\n\tUSER_AGENT_GIT autolearn=unavailable autolearn_force=no version=3.4.0", "Received": ["from mail.kernel.org (mail.kernel.org [198.145.29.99])\n\tby smtp.lore.kernel.org (Postfix) with ESMTP id C61B4C433E7\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 21:32:00 +0000 (UTC)", "from vger.kernel.org (vger.kernel.org [23.128.96.18])\n\tby mail.kernel.org (Postfix) with ESMTP id 7604222203\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 21:32:00 +0000 (UTC)", "(majordomo@vger.kernel.org) by vger.kernel.org via listexpand\n        id S1729410AbgJHVb4 (ORCPT <rfc822;bpf@archiver.kernel.org>);\n        Thu, 8 Oct 2020 17:31:56 -0400", "from www62.your-server.de ([213.133.104.62]:46934 \"EHLO\n        www62.your-server.de\" rhost-flags-OK-OK-OK-OK) by vger.kernel.org\n        with ESMTP id S1728363AbgJHVbx (ORCPT <rfc822;bpf@vger.kernel.org>);\n        Thu, 8 Oct 2020 17:31:53 -0400", "from 75.57.196.178.dynamic.wline.res.cust.swisscom.ch\n ([178.196.57.75] helo=localhost)\n        by www62.your-server.de with esmtpsa\n (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)\n        (Exim 4.89_1)\n        (envelope-from <daniel@iogearbox.net>)\n        id 1kQdVv-0007uj-4U; Thu, 08 Oct 2020 23:31:51 +0200"], "From": "Daniel Borkmann <daniel@iogearbox.net>", "To": "ast@kernel.org", "Cc": "daniel@iogearbox.net, john.fastabend@gmail.com,\n        netdev@vger.kernel.org, bpf@vger.kernel.org", "Subject": "[PATCH bpf-next 2/6] bpf: add redirect_peer helper", "Date": "Thu,  8 Oct 2020 23:31:44 +0200", "Message-Id": "<20201008213148.26848-3-daniel@iogearbox.net>", "X-Mailer": "git-send-email 2.21.0", "In-Reply-To": "<20201008213148.26848-1-daniel@iogearbox.net>", "References": "<20201008213148.26848-1-daniel@iogearbox.net>", "MIME-Version": "1.0", "Content-Transfer-Encoding": "8bit", "X-Authenticated-Sender": "daniel@iogearbox.net", "X-Virus-Scanned": "Clear (ClamAV 0.102.4/25951/Thu Oct  8 15:53:03 2020)", "Precedence": "bulk", "List-ID": "<bpf.vger.kernel.org>", "X-Mailing-List": "bpf@vger.kernel.org", "X-Patchwork-Delegate": "bpf@iogearbox.net"}, "content": "Add an efficient ingress to ingress netns switch that can be used out of tc BPF\nprograms in order to redirect traffic from host ns ingress into a container\nveth device ingress without having to go via CPU backlog queue [0]. For local\ncontainers this can also be utilized and path via CPU backlog queue only needs\nto be taken once, not twice. On a high level this borrows from ipvlan which does\nsimilar switch in __netif_receive_skb_core() and then iterates via another_round.\nThis helps to reduce latency for mentioned use cases.\n\nPod to remote pod with redirect(), TCP_RR [1]:\n\n  # percpu_netperf 10.217.1.33\n          RT_LATENCY:         122.450         (per CPU:         122.666         122.401         122.333         122.401 )\n        MEAN_LATENCY:         121.210         (per CPU:         121.100         121.260         121.320         121.160 )\n      STDDEV_LATENCY:         120.040         (per CPU:         119.420         119.910         125.460         115.370 )\n         MIN_LATENCY:          46.500         (per CPU:          47.000          47.000          47.000          45.000 )\n         P50_LATENCY:         118.500         (per CPU:         118.000         119.000         118.000         119.000 )\n         P90_LATENCY:         127.500         (per CPU:         127.000         128.000         127.000         128.000 )\n         P99_LATENCY:         130.750         (per CPU:         131.000         131.000         129.000         132.000 )\n\n    TRANSACTION_RATE:       32666.400         (per CPU:        8152.200        8169.842        8174.439        8169.897 )\n\nPod to remote pod with redirect_peer(), TCP_RR:\n\n  # percpu_netperf 10.217.1.33\n          RT_LATENCY:          44.449         (per CPU:          43.767          43.127          45.279          45.622 )\n        MEAN_LATENCY:          45.065         (per CPU:          44.030          45.530          45.190          45.510 )\n      STDDEV_LATENCY:          84.823         (per CPU:          66.770          97.290          84.380          90.850 )\n         MIN_LATENCY:          33.500         (per CPU:          33.000          33.000          34.000          34.000 )\n         P50_LATENCY:          43.250         (per CPU:          43.000          43.000          43.000          44.000 )\n         P90_LATENCY:          46.750         (per CPU:          46.000          47.000          47.000          47.000 )\n         P99_LATENCY:          52.750         (per CPU:          51.000          54.000          53.000          53.000 )\n\n    TRANSACTION_RATE:       90039.500         (per CPU:       22848.186       23187.089       22085.077       21919.130 )\n\n  [0] https://linuxplumbersconf.org/event/7/contributions/674/attachments/568/1002/plumbers_2020_cilium_load_balancer.pdf\n  [1] https://github.com/borkmann/netperf_scripts/blob/master/percpu_netperf\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\n---\n drivers/net/veth.c             |  9 ++++++\n include/linux/netdevice.h      |  4 +++\n include/uapi/linux/bpf.h       | 17 +++++++++++\n net/core/dev.c                 | 15 ++++++++--\n net/core/filter.c              | 54 +++++++++++++++++++++++++++++-----\n tools/include/uapi/linux/bpf.h | 17 +++++++++++\n 6 files changed, 106 insertions(+), 10 deletions(-)", "diff": "diff --git a/drivers/net/veth.c b/drivers/net/veth.c\nindex 091e5b4ba042..8c737668008a 100644\n--- a/drivers/net/veth.c\n+++ b/drivers/net/veth.c\n@@ -420,6 +420,14 @@ static int veth_select_rxq(struct net_device *dev)\n \treturn smp_processor_id() % dev->real_num_rx_queues;\n }\n \n+static struct net_device *veth_peer_dev(struct net_device *dev)\n+{\n+\tstruct veth_priv *priv = netdev_priv(dev);\n+\n+\t/* Callers must be under RCU read side. */\n+\treturn rcu_dereference(priv->peer);\n+}\n+\n static int veth_xdp_xmit(struct net_device *dev, int n,\n \t\t\t struct xdp_frame **frames,\n \t\t\t u32 flags, bool ndo_xmit)\n@@ -1224,6 +1232,7 @@ static const struct net_device_ops veth_netdev_ops = {\n \t.ndo_set_rx_headroom\t= veth_set_rx_headroom,\n \t.ndo_bpf\t\t= veth_xdp,\n \t.ndo_xdp_xmit\t\t= veth_ndo_xdp_xmit,\n+\t.ndo_get_peer_dev\t= veth_peer_dev,\n };\n \n #define VETH_FEATURES (NETIF_F_SG | NETIF_F_FRAGLIST | NETIF_F_HW_CSUM | \\\ndiff --git a/include/linux/netdevice.h b/include/linux/netdevice.h\nindex 28cfa53daf72..0533f86018dd 100644\n--- a/include/linux/netdevice.h\n+++ b/include/linux/netdevice.h\n@@ -1277,6 +1277,9 @@ struct netdev_net_notifier {\n  * int (*ndo_tunnel_ctl)(struct net_device *dev, struct ip_tunnel_parm *p,\n  *\t\t\t int cmd);\n  *\tAdd, change, delete or get information on an IPv4 tunnel.\n+ * struct net_device *(*ndo_get_peer_dev)(struct net_device *dev);\n+ *\tIf a device is paired with a peer device, return the peer instance.\n+ *\tThe caller must be under RCU read context.\n  */\n struct net_device_ops {\n \tint\t\t\t(*ndo_init)(struct net_device *dev);\n@@ -1484,6 +1487,7 @@ struct net_device_ops {\n \tstruct devlink_port *\t(*ndo_get_devlink_port)(struct net_device *dev);\n \tint\t\t\t(*ndo_tunnel_ctl)(struct net_device *dev,\n \t\t\t\t\t\t  struct ip_tunnel_parm *p, int cmd);\n+\tstruct net_device *\t(*ndo_get_peer_dev)(struct net_device *dev);\n };\n \n /**\ndiff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h\nindex 8e8941535c28..ea8dfbe62c7a 100644\n--- a/include/uapi/linux/bpf.h\n+++ b/include/uapi/linux/bpf.h\n@@ -3719,6 +3719,22 @@ union bpf_attr {\n  *\t\tnever return NULL.\n  *\tReturn\n  *\t\tA pointer pointing to the kernel percpu variable on this cpu.\n+ *\n+ * long bpf_redirect_peer(u32 ifindex, u64 flags)\n+ * \tDescription\n+ * \t\tRedirect the packet to another net device of index *ifindex*.\n+ * \t\tThis helper is somewhat similar to **bpf_redirect**\\ (), except\n+ * \t\tthat the redirection happens to the *ifindex*' peer device and\n+ * \t\tthe netns switch takes place from ingress to ingress without\n+ * \t\tgoing through the CPU's backlog queue.\n+ *\n+ * \t\tThe *flags* argument is reserved and must be 0. The helper is\n+ * \t\tcurrently only supported for tc BPF program types at the ingress\n+ * \t\thook and for veth device types. The peer device must reside in a\n+ * \t\tdifferent network namespace.\n+ * \tReturn\n+ * \t\tThe helper returns **TC_ACT_REDIRECT** on success or\n+ * \t\t**TC_ACT_SHOT** on error.\n  */\n #define __BPF_FUNC_MAPPER(FN)\t\t\\\n \tFN(unspec),\t\t\t\\\n@@ -3876,6 +3892,7 @@ union bpf_attr {\n \tFN(redirect_neigh),\t\t\\\n \tFN(bpf_per_cpu_ptr),            \\\n \tFN(bpf_this_cpu_ptr),\t\t\\\n+\tFN(redirect_peer),\t\t\\\n \t/* */\n \n /* integer value in 'imm' field of BPF_CALL instruction selects which helper\ndiff --git a/net/core/dev.c b/net/core/dev.c\nindex 9d55bf5d1a65..7dd015823593 100644\n--- a/net/core/dev.c\n+++ b/net/core/dev.c\n@@ -4930,7 +4930,7 @@ EXPORT_SYMBOL_GPL(br_fdb_test_addr_hook);\n \n static inline struct sk_buff *\n sch_handle_ingress(struct sk_buff *skb, struct packet_type **pt_prev, int *ret,\n-\t\t   struct net_device *orig_dev)\n+\t\t   struct net_device *orig_dev, bool *another)\n {\n #ifdef CONFIG_NET_CLS_ACT\n \tstruct mini_Qdisc *miniq = rcu_dereference_bh(skb->dev->miniq_ingress);\n@@ -4974,7 +4974,11 @@ sch_handle_ingress(struct sk_buff *skb, struct packet_type **pt_prev, int *ret,\n \t\t * redirecting to another netdev\n \t\t */\n \t\t__skb_push(skb, skb->mac_len);\n-\t\tskb_do_redirect(skb);\n+\t\tif (skb_do_redirect(skb) == -EAGAIN) {\n+\t\t\t__skb_pull(skb, skb->mac_len);\n+\t\t\t*another = true;\n+\t\t\tbreak;\n+\t\t}\n \t\treturn NULL;\n \tcase TC_ACT_CONSUMED:\n \t\treturn NULL;\n@@ -5163,7 +5167,12 @@ static int __netif_receive_skb_core(struct sk_buff **pskb, bool pfmemalloc,\n skip_taps:\n #ifdef CONFIG_NET_INGRESS\n \tif (static_branch_unlikely(&ingress_needed_key)) {\n-\t\tskb = sch_handle_ingress(skb, &pt_prev, &ret, orig_dev);\n+\t\tbool another = false;\n+\n+\t\tskb = sch_handle_ingress(skb, &pt_prev, &ret, orig_dev,\n+\t\t\t\t\t &another);\n+\t\tif (another)\n+\t\t\tgoto another_round;\n \t\tif (!skb)\n \t\t\tgoto out;\n \ndiff --git a/net/core/filter.c b/net/core/filter.c\nindex 05df73780dd3..0f55df691f8c 100644\n--- a/net/core/filter.c\n+++ b/net/core/filter.c\n@@ -2380,8 +2380,9 @@ static int __bpf_redirect_neigh(struct sk_buff *skb, struct net_device *dev)\n \n /* Internal, non-exposed redirect flags. */\n enum {\n-\tBPF_F_NEIGH = (1ULL << 1),\n-#define BPF_F_REDIRECT_INTERNAL\t(BPF_F_NEIGH)\n+\tBPF_F_NEIGH\t= (1ULL << 1),\n+\tBPF_F_PEER\t= (1ULL << 2),\n+#define BPF_F_REDIRECT_INTERNAL\t(BPF_F_NEIGH | BPF_F_PEER)\n };\n \n BPF_CALL_3(bpf_clone_redirect, struct sk_buff *, skb, u32, ifindex, u64, flags)\n@@ -2430,19 +2431,35 @@ EXPORT_PER_CPU_SYMBOL_GPL(bpf_redirect_info);\n int skb_do_redirect(struct sk_buff *skb)\n {\n \tstruct bpf_redirect_info *ri = this_cpu_ptr(&bpf_redirect_info);\n+\tstruct net *net = dev_net(skb->dev);\n \tstruct net_device *dev;\n \tu32 flags = ri->flags;\n \n-\tdev = dev_get_by_index_rcu(dev_net(skb->dev), ri->tgt_index);\n+\tdev = dev_get_by_index_rcu(net, ri->tgt_index);\n \tri->tgt_index = 0;\n-\tif (unlikely(!dev)) {\n-\t\tkfree_skb(skb);\n-\t\treturn -EINVAL;\n+\tri->flags = 0;\n+\tif (unlikely(!dev))\n+\t\tgoto out_drop;\n+\tif (flags & BPF_F_PEER) {\n+\t\tconst struct net_device_ops *ops = dev->netdev_ops;\n+\n+\t\tif (unlikely(!ops->ndo_get_peer_dev ||\n+\t\t\t     !skb_at_tc_ingress(skb)))\n+\t\t\tgoto out_drop;\n+\t\tdev = ops->ndo_get_peer_dev(dev);\n+\t\tif (unlikely(!dev ||\n+\t\t\t     !is_skb_forwardable(dev, skb) ||\n+\t\t\t     net_eq(net, dev_net(dev))))\n+\t\t\tgoto out_drop;\n+\t\tskb->dev = dev;\n+\t\treturn -EAGAIN;\n \t}\n-\n \treturn flags & BPF_F_NEIGH ?\n \t       __bpf_redirect_neigh(skb, dev) :\n \t       __bpf_redirect(skb, dev, flags);\n+out_drop:\n+\tkfree_skb(skb);\n+\treturn -EINVAL;\n }\n \n BPF_CALL_2(bpf_redirect, u32, ifindex, u64, flags)\n@@ -2466,6 +2483,27 @@ static const struct bpf_func_proto bpf_redirect_proto = {\n \t.arg2_type      = ARG_ANYTHING,\n };\n \n+BPF_CALL_2(bpf_redirect_peer, u32, ifindex, u64, flags)\n+{\n+\tstruct bpf_redirect_info *ri = this_cpu_ptr(&bpf_redirect_info);\n+\n+\tif (unlikely(flags))\n+\t\treturn TC_ACT_SHOT;\n+\n+\tri->flags = BPF_F_PEER;\n+\tri->tgt_index = ifindex;\n+\n+\treturn TC_ACT_REDIRECT;\n+}\n+\n+static const struct bpf_func_proto bpf_redirect_peer_proto = {\n+\t.func           = bpf_redirect_peer,\n+\t.gpl_only       = false,\n+\t.ret_type       = RET_INTEGER,\n+\t.arg1_type      = ARG_ANYTHING,\n+\t.arg2_type      = ARG_ANYTHING,\n+};\n+\n BPF_CALL_2(bpf_redirect_neigh, u32, ifindex, u64, flags)\n {\n \tstruct bpf_redirect_info *ri = this_cpu_ptr(&bpf_redirect_info);\n@@ -7049,6 +7087,8 @@ tc_cls_act_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)\n \t\treturn &bpf_redirect_proto;\n \tcase BPF_FUNC_redirect_neigh:\n \t\treturn &bpf_redirect_neigh_proto;\n+\tcase BPF_FUNC_redirect_peer:\n+\t\treturn &bpf_redirect_peer_proto;\n \tcase BPF_FUNC_get_route_realm:\n \t\treturn &bpf_get_route_realm_proto;\n \tcase BPF_FUNC_get_hash_recalc:\ndiff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h\nindex 8e8941535c28..ea8dfbe62c7a 100644\n--- a/tools/include/uapi/linux/bpf.h\n+++ b/tools/include/uapi/linux/bpf.h\n@@ -3719,6 +3719,22 @@ union bpf_attr {\n  *\t\tnever return NULL.\n  *\tReturn\n  *\t\tA pointer pointing to the kernel percpu variable on this cpu.\n+ *\n+ * long bpf_redirect_peer(u32 ifindex, u64 flags)\n+ * \tDescription\n+ * \t\tRedirect the packet to another net device of index *ifindex*.\n+ * \t\tThis helper is somewhat similar to **bpf_redirect**\\ (), except\n+ * \t\tthat the redirection happens to the *ifindex*' peer device and\n+ * \t\tthe netns switch takes place from ingress to ingress without\n+ * \t\tgoing through the CPU's backlog queue.\n+ *\n+ * \t\tThe *flags* argument is reserved and must be 0. The helper is\n+ * \t\tcurrently only supported for tc BPF program types at the ingress\n+ * \t\thook and for veth device types. The peer device must reside in a\n+ * \t\tdifferent network namespace.\n+ * \tReturn\n+ * \t\tThe helper returns **TC_ACT_REDIRECT** on success or\n+ * \t\t**TC_ACT_SHOT** on error.\n  */\n #define __BPF_FUNC_MAPPER(FN)\t\t\\\n \tFN(unspec),\t\t\t\\\n@@ -3876,6 +3892,7 @@ union bpf_attr {\n \tFN(redirect_neigh),\t\t\\\n \tFN(bpf_per_cpu_ptr),            \\\n \tFN(bpf_this_cpu_ptr),\t\t\\\n+\tFN(redirect_peer),\t\t\\\n \t/* */\n \n /* integer value in 'imm' field of BPF_CALL instruction selects which helper\n", "prefixes": ["bpf-next", "2/6"]}, "patches/11824617/": {"id": 11824617, "url": "https://patchwork.kernel.org/api/1.1/patches/11824617/", "web_url": "https://patchwork.kernel.org/patch/11824617/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<20201008213148.26848-4-daniel@iogearbox.net>", "date": "2020-10-08T21:31:45", "name": "[bpf-next,3/6] bpf: allow for map-in-map with dynamic inner array map entries", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "f0ea6fbddbfa0315a3a06b414f6bd0f314680632", "submitter": {"id": 123431, "url": "https://patchwork.kernel.org/api/1.1/people/123431/", "name": "Daniel Borkmann", "email": "daniel@iogearbox.net"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11824617/mbox/", "series": [{"id": 361757, "url": "https://patchwork.kernel.org/api/1.1/series/361757/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361757", "date": "2020-10-08T21:31:42", "name": "[bpf-next,1/6] bpf: improve bpf_redirect_neigh helper description", "version": 1, "mbox": "https://patchwork.kernel.org/series/361757/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11824617/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11824617/checks/", "tags": {}, "headers": {"Return-Path": "<SRS0=0bGE=DP=vger.kernel.org=bpf-owner@kernel.org>", "X-Spam-Checker-Version": "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org", "X-Spam-Level": "", "X-Spam-Status": "No, score=-12.7 required=3.0 tests=BAYES_00,\n\tHEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_PATCH,MAILING_LIST_MULTI,SIGNED_OFF_BY,\n\tSPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED,USER_AGENT_GIT autolearn=ham\n\tautolearn_force=no version=3.4.0", "Received": ["from mail.kernel.org (mail.kernel.org [198.145.29.99])\n\tby smtp.lore.kernel.org (Postfix) with ESMTP id D34DAC433E7\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 21:32:04 +0000 (UTC)", "from vger.kernel.org (vger.kernel.org [23.128.96.18])\n\tby mail.kernel.org (Postfix) with ESMTP id 8AF0822203\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 21:32:04 +0000 (UTC)", "(majordomo@vger.kernel.org) by vger.kernel.org via listexpand\n        id S1729541AbgJHVcD (ORCPT <rfc822;bpf@archiver.kernel.org>);\n        Thu, 8 Oct 2020 17:32:03 -0400", "from www62.your-server.de ([213.133.104.62]:46942 \"EHLO\n        www62.your-server.de\" rhost-flags-OK-OK-OK-OK) by vger.kernel.org\n        with ESMTP id S1729225AbgJHVby (ORCPT <rfc822;bpf@vger.kernel.org>);\n        Thu, 8 Oct 2020 17:31:54 -0400", "from 75.57.196.178.dynamic.wline.res.cust.swisscom.ch\n ([178.196.57.75] helo=localhost)\n        by www62.your-server.de with esmtpsa\n (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)\n        (Exim 4.89_1)\n        (envelope-from <daniel@iogearbox.net>)\n        id 1kQdVv-0007us-Is; Thu, 08 Oct 2020 23:31:51 +0200"], "From": "Daniel Borkmann <daniel@iogearbox.net>", "To": "ast@kernel.org", "Cc": "daniel@iogearbox.net, john.fastabend@gmail.com,\n        netdev@vger.kernel.org, bpf@vger.kernel.org", "Subject": "[PATCH bpf-next 3/6] bpf: allow for map-in-map with dynamic inner\n array map entries", "Date": "Thu,  8 Oct 2020 23:31:45 +0200", "Message-Id": "<20201008213148.26848-4-daniel@iogearbox.net>", "X-Mailer": "git-send-email 2.21.0", "In-Reply-To": "<20201008213148.26848-1-daniel@iogearbox.net>", "References": "<20201008213148.26848-1-daniel@iogearbox.net>", "MIME-Version": "1.0", "Content-Transfer-Encoding": "8bit", "X-Authenticated-Sender": "daniel@iogearbox.net", "X-Virus-Scanned": "Clear (ClamAV 0.102.4/25951/Thu Oct  8 15:53:03 2020)", "Precedence": "bulk", "List-ID": "<bpf.vger.kernel.org>", "X-Mailing-List": "bpf@vger.kernel.org", "X-Patchwork-Delegate": "bpf@iogearbox.net"}, "content": "Recent work in f4d05259213f (\"bpf: Add map_meta_equal map ops\") and 134fede4eecf\n(\"bpf: Relax max_entries check for most of the inner map types\") added support\nfor dynamic inner max elements for most map-in-map types. Exceptions were maps\nlike array or prog array where the map_gen_lookup() callback uses the maps'\nmax_entries field as a constant when emitting instructions.\n\nWe recently implemented Maglev consistent hashing into Cilium's load balancer\nwhich uses map-in-map with an outer map being hash and inner being array holding\nthe Maglev backend table for each service. This has been designed this way in\norder to reduce overall memory consumption given the outer hash map allows to\navoid preallocating a large, flat memory area for all services. Also, the\nnumber of service mappings is not always known a-priori.\n\nThe use case for dynamic inner array map entries is to further reduce memory\noverhead, for example, some services might just have a small number of back\nends while others could have a large number. Right now the Maglev backend table\nfor small and large number of backends would need to have the same inner array\nmap entries which adds a lot of unneeded overhead.\n\nDynamic inner array map entries can be realized by avoiding the inlined code\ngeneration for their lookup. The lookup will still be efficient since it will\nbe calling into array_map_lookup_elem() directly and thus avoiding retpoline.\nThe patch adds a BPF_F_NO_INLINE flag to map creation which internally swaps\nout map ops with a variant that does not have map_gen_lookup() callback and\na relaxed map_meta_equal() that calls bpf_map_meta_equal() directly.\n\nExample code generation where inner map is dynamic sized array:\n\n  # bpftool p d x i 125\n  int handle__sys_enter(void * ctx):\n  ; int handle__sys_enter(void *ctx)\n     0: (b4) w1 = 0\n  ; int key = 0;\n     1: (63) *(u32 *)(r10 -4) = r1\n     2: (bf) r2 = r10\n  ;\n     3: (07) r2 += -4\n  ; inner_map = bpf_map_lookup_elem(&outer_arr_dyn, &key);\n     4: (18) r1 = map[id:468]\n     6: (07) r1 += 272\n     7: (61) r0 = *(u32 *)(r2 +0)\n     8: (35) if r0 >= 0x3 goto pc+5\n     9: (67) r0 <<= 3\n    10: (0f) r0 += r1\n    11: (79) r0 = *(u64 *)(r0 +0)\n    12: (15) if r0 == 0x0 goto pc+1\n    13: (05) goto pc+1\n    14: (b7) r0 = 0\n    15: (b4) w6 = -1\n  ; if (!inner_map)\n    16: (15) if r0 == 0x0 goto pc+6\n    17: (bf) r2 = r10\n  ;\n    18: (07) r2 += -4\n  ; val = bpf_map_lookup_elem(inner_map, &key);\n    19: (bf) r1 = r0                               | No inlining but instead\n    20: (85) call array_map_lookup_elem#149280     | call to array_map_lookup_elem()\n  ; return val ? *val : -1;                        | for inner array lookup.\n    21: (15) if r0 == 0x0 goto pc+1\n  ; return val ? *val : -1;\n    22: (61) r6 = *(u32 *)(r0 +0)\n  ; }\n    23: (bc) w0 = w6\n    24: (95) exit\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\n---\n include/linux/bpf.h            |  1 +\n include/uapi/linux/bpf.h       |  5 +++++\n kernel/bpf/arraymap.c          | 40 ++++++++++++++++++++++++++++++++--\n kernel/bpf/syscall.c           |  3 ++-\n tools/include/uapi/linux/bpf.h |  5 +++++\n 5 files changed, 51 insertions(+), 3 deletions(-)", "diff": "diff --git a/include/linux/bpf.h b/include/linux/bpf.h\nindex dc63eeed4fd9..1f454f9ae739 100644\n--- a/include/linux/bpf.h\n+++ b/include/linux/bpf.h\n@@ -54,6 +54,7 @@ struct bpf_iter_seq_info {\n struct bpf_map_ops {\n \t/* funcs callable from userspace (via syscall) */\n \tint (*map_alloc_check)(union bpf_attr *attr);\n+\tconst struct bpf_map_ops *(*map_swap_ops)(union bpf_attr *attr);\n \tstruct bpf_map *(*map_alloc)(union bpf_attr *attr);\n \tvoid (*map_release)(struct bpf_map *map, struct file *map_file);\n \tvoid (*map_free)(struct bpf_map *map);\ndiff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h\nindex ea8dfbe62c7a..eb384264f906 100644\n--- a/include/uapi/linux/bpf.h\n+++ b/include/uapi/linux/bpf.h\n@@ -435,6 +435,11 @@ enum {\n \n /* Share perf_event among processes */\n \tBPF_F_PRESERVE_ELEMS\t= (1U << 11),\n+\n+/* Do not inline (array) map lookups so the array map can be used for\n+ * map in map with dynamic max entries.\n+ */\n+\tBPF_F_NO_INLINE\t\t= (1U << 12),\n };\n \n /* Flags for BPF_PROG_QUERY. */\ndiff --git a/kernel/bpf/arraymap.c b/kernel/bpf/arraymap.c\nindex bd777dd6f967..b8ce41fa2fa7 100644\n--- a/kernel/bpf/arraymap.c\n+++ b/kernel/bpf/arraymap.c\n@@ -16,7 +16,7 @@\n \n #define ARRAY_CREATE_FLAG_MASK \\\n \t(BPF_F_NUMA_NODE | BPF_F_MMAPABLE | BPF_F_ACCESS_MASK | \\\n-\t BPF_F_PRESERVE_ELEMS)\n+\t BPF_F_PRESERVE_ELEMS | BPF_F_NO_INLINE)\n \n static void bpf_array_free_percpu(struct bpf_array *array)\n {\n@@ -62,7 +62,7 @@ int array_map_alloc_check(union bpf_attr *attr)\n \t\treturn -EINVAL;\n \n \tif (attr->map_type != BPF_MAP_TYPE_ARRAY &&\n-\t    attr->map_flags & BPF_F_MMAPABLE)\n+\t    attr->map_flags & (BPF_F_MMAPABLE | BPF_F_NO_INLINE))\n \t\treturn -EINVAL;\n \n \tif (attr->map_type != BPF_MAP_TYPE_PERF_EVENT_ARRAY &&\n@@ -78,6 +78,16 @@ int array_map_alloc_check(union bpf_attr *attr)\n \treturn 0;\n }\n \n+const struct bpf_map_ops array_map_no_inline_ops;\n+const struct bpf_map_ops array_map_ops;\n+\n+static const struct bpf_map_ops *array_map_swap_ops(union bpf_attr *attr)\n+{\n+\treturn attr->map_flags & BPF_F_NO_INLINE ?\n+\t       &array_map_no_inline_ops :\n+\t       &array_map_ops;\n+}\n+\n static struct bpf_map *array_map_alloc(union bpf_attr *attr)\n {\n \tbool percpu = attr->map_type == BPF_MAP_TYPE_PERCPU_ARRAY;\n@@ -639,6 +649,7 @@ static const struct bpf_iter_seq_info iter_seq_info = {\n static int array_map_btf_id;\n const struct bpf_map_ops array_map_ops = {\n \t.map_meta_equal = array_map_meta_equal,\n+\t.map_swap_ops = array_map_swap_ops,\n \t.map_alloc_check = array_map_alloc_check,\n \t.map_alloc = array_map_alloc,\n \t.map_free = array_map_free,\n@@ -659,6 +670,31 @@ const struct bpf_map_ops array_map_ops = {\n \t.iter_seq_info = &iter_seq_info,\n };\n \n+/* Variant which does not have map_gen_lookup() implementation, but\n+ * therefore can relax map_meta_equal() check to allow for dynamic\n+ * max_entries for inner maps.\n+ */\n+const struct bpf_map_ops array_map_no_inline_ops = {\n+\t.map_meta_equal = bpf_map_meta_equal,\n+\t.map_alloc_check = array_map_alloc_check,\n+\t.map_alloc = array_map_alloc,\n+\t.map_free = array_map_free,\n+\t.map_get_next_key = array_map_get_next_key,\n+\t.map_lookup_elem = array_map_lookup_elem,\n+\t.map_update_elem = array_map_update_elem,\n+\t.map_delete_elem = array_map_delete_elem,\n+\t.map_direct_value_addr = array_map_direct_value_addr,\n+\t.map_direct_value_meta = array_map_direct_value_meta,\n+\t.map_mmap = array_map_mmap,\n+\t.map_seq_show_elem = array_map_seq_show_elem,\n+\t.map_check_btf = array_map_check_btf,\n+\t.map_lookup_batch = generic_map_lookup_batch,\n+\t.map_update_batch = generic_map_update_batch,\n+\t.map_btf_name = \"bpf_array\",\n+\t.map_btf_id = &array_map_btf_id,\n+\t.iter_seq_info = &iter_seq_info,\n+};\n+\n static int percpu_array_map_btf_id;\n const struct bpf_map_ops percpu_array_map_ops = {\n \t.map_meta_equal = bpf_map_meta_equal,\ndiff --git a/kernel/bpf/syscall.c b/kernel/bpf/syscall.c\nindex 1110ecd7d1f3..519bf867f065 100644\n--- a/kernel/bpf/syscall.c\n+++ b/kernel/bpf/syscall.c\n@@ -111,7 +111,8 @@ static struct bpf_map *find_and_alloc_map(union bpf_attr *attr)\n \tops = bpf_map_types[type];\n \tif (!ops)\n \t\treturn ERR_PTR(-EINVAL);\n-\n+\tif (ops->map_swap_ops)\n+\t\tops = ops->map_swap_ops(attr);\n \tif (ops->map_alloc_check) {\n \t\terr = ops->map_alloc_check(attr);\n \t\tif (err)\ndiff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h\nindex ea8dfbe62c7a..eb384264f906 100644\n--- a/tools/include/uapi/linux/bpf.h\n+++ b/tools/include/uapi/linux/bpf.h\n@@ -435,6 +435,11 @@ enum {\n \n /* Share perf_event among processes */\n \tBPF_F_PRESERVE_ELEMS\t= (1U << 11),\n+\n+/* Do not inline (array) map lookups so the array map can be used for\n+ * map in map with dynamic max entries.\n+ */\n+\tBPF_F_NO_INLINE\t\t= (1U << 12),\n };\n \n /* Flags for BPF_PROG_QUERY. */\n", "prefixes": ["bpf-next", "3/6"]}, "patches/11824619/": {"id": 11824619, "url": "https://patchwork.kernel.org/api/1.1/patches/11824619/", "web_url": "https://patchwork.kernel.org/patch/11824619/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<20201008213148.26848-5-daniel@iogearbox.net>", "date": "2020-10-08T21:31:46", "name": "[bpf-next,4/6] bpf, selftests: add test for different array inner map size", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "0fafc102dd77b2bcc5df71df19780dcb185d1abd", "submitter": {"id": 123431, "url": "https://patchwork.kernel.org/api/1.1/people/123431/", "name": "Daniel Borkmann", "email": "daniel@iogearbox.net"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11824619/mbox/", "series": [{"id": 361757, "url": "https://patchwork.kernel.org/api/1.1/series/361757/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361757", "date": "2020-10-08T21:31:42", "name": "[bpf-next,1/6] bpf: improve bpf_redirect_neigh helper description", "version": 1, "mbox": "https://patchwork.kernel.org/series/361757/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11824619/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11824619/checks/", "tags": {}, "headers": {"Return-Path": "<SRS0=0bGE=DP=vger.kernel.org=bpf-owner@kernel.org>", "X-Spam-Checker-Version": "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org", "X-Spam-Level": "", "X-Spam-Status": "No, score=-12.7 required=3.0 tests=BAYES_00,\n\tHEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_PATCH,MAILING_LIST_MULTI,SIGNED_OFF_BY,\n\tSPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED,USER_AGENT_GIT autolearn=ham\n\tautolearn_force=no version=3.4.0", "Received": ["from mail.kernel.org (mail.kernel.org [198.145.29.99])\n\tby smtp.lore.kernel.org (Postfix) with ESMTP id 4D8A8C433E7\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 21:31:57 +0000 (UTC)", "from vger.kernel.org (vger.kernel.org [23.128.96.18])\n\tby mail.kernel.org (Postfix) with ESMTP id 07E4D22203\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 21:31:56 +0000 (UTC)", "(majordomo@vger.kernel.org) by vger.kernel.org via listexpand\n        id S1728202AbgJHVb4 (ORCPT <rfc822;bpf@archiver.kernel.org>);\n        Thu, 8 Oct 2020 17:31:56 -0400", "from www62.your-server.de ([213.133.104.62]:46948 \"EHLO\n        www62.your-server.de\" rhost-flags-OK-OK-OK-OK) by vger.kernel.org\n        with ESMTP id S1725852AbgJHVby (ORCPT <rfc822;bpf@vger.kernel.org>);\n        Thu, 8 Oct 2020 17:31:54 -0400", "from 75.57.196.178.dynamic.wline.res.cust.swisscom.ch\n ([178.196.57.75] helo=localhost)\n        by www62.your-server.de with esmtpsa\n (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)\n        (Exim 4.89_1)\n        (envelope-from <daniel@iogearbox.net>)\n        id 1kQdVw-0007v1-2N; Thu, 08 Oct 2020 23:31:52 +0200"], "From": "Daniel Borkmann <daniel@iogearbox.net>", "To": "ast@kernel.org", "Cc": "daniel@iogearbox.net, john.fastabend@gmail.com,\n        netdev@vger.kernel.org, bpf@vger.kernel.org", "Subject": "[PATCH bpf-next 4/6] bpf,\n selftests: add test for different array inner map size", "Date": "Thu,  8 Oct 2020 23:31:46 +0200", "Message-Id": "<20201008213148.26848-5-daniel@iogearbox.net>", "X-Mailer": "git-send-email 2.21.0", "In-Reply-To": "<20201008213148.26848-1-daniel@iogearbox.net>", "References": "<20201008213148.26848-1-daniel@iogearbox.net>", "MIME-Version": "1.0", "Content-Transfer-Encoding": "8bit", "X-Authenticated-Sender": "daniel@iogearbox.net", "X-Virus-Scanned": "Clear (ClamAV 0.102.4/25951/Thu Oct  8 15:53:03 2020)", "Precedence": "bulk", "List-ID": "<bpf.vger.kernel.org>", "X-Mailing-List": "bpf@vger.kernel.org", "X-Patchwork-Delegate": "bpf@iogearbox.net"}, "content": "Extend the \"diff_size\" subtest to also include a non-inlined array map variant\nwhere dynamic inner #elems are possible.\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\n---\n .../selftests/bpf/prog_tests/btf_map_in_map.c | 39 ++++++++++++-----\n .../selftests/bpf/progs/test_btf_map_in_map.c | 43 +++++++++++++++++++\n 2 files changed, 72 insertions(+), 10 deletions(-)", "diff": "diff --git a/tools/testing/selftests/bpf/prog_tests/btf_map_in_map.c b/tools/testing/selftests/bpf/prog_tests/btf_map_in_map.c\nindex 540fea4c91a5..e478bdec73b8 100644\n--- a/tools/testing/selftests/bpf/prog_tests/btf_map_in_map.c\n+++ b/tools/testing/selftests/bpf/prog_tests/btf_map_in_map.c\n@@ -55,10 +55,10 @@ static int kern_sync_rcu(void)\n \n static void test_lookup_update(void)\n {\n-\tint err, key = 0, val, i;\n+\tint map1_fd, map2_fd, map3_fd, map4_fd, map5_fd, map1_id, map2_id;\n+\tint outer_arr_fd, outer_hash_fd, outer_arr_dyn_fd;\n \tstruct test_btf_map_in_map *skel;\n-\tint outer_arr_fd, outer_hash_fd;\n-\tint fd, map1_fd, map2_fd, map1_id, map2_id;\n+\tint err, key = 0, val, i, fd;\n \n \tskel = test_btf_map_in_map__open_and_load();\n \tif (CHECK(!skel, \"skel_open\", \"failed to open&load skeleton\\n\"))\n@@ -70,32 +70,45 @@ static void test_lookup_update(void)\n \n \tmap1_fd = bpf_map__fd(skel->maps.inner_map1);\n \tmap2_fd = bpf_map__fd(skel->maps.inner_map2);\n+\tmap3_fd = bpf_map__fd(skel->maps.inner_map3);\n+\tmap4_fd = bpf_map__fd(skel->maps.inner_map4);\n+\tmap5_fd = bpf_map__fd(skel->maps.inner_map5);\n+\touter_arr_dyn_fd = bpf_map__fd(skel->maps.outer_arr_dyn);\n \touter_arr_fd = bpf_map__fd(skel->maps.outer_arr);\n \touter_hash_fd = bpf_map__fd(skel->maps.outer_hash);\n \n-\t/* inner1 = input, inner2 = input + 1 */\n-\tmap1_fd = bpf_map__fd(skel->maps.inner_map1);\n+\t/* inner1 = input, inner2 = input + 1, inner3 = input + 2 */\n \tbpf_map_update_elem(outer_arr_fd, &key, &map1_fd, 0);\n-\tmap2_fd = bpf_map__fd(skel->maps.inner_map2);\n \tbpf_map_update_elem(outer_hash_fd, &key, &map2_fd, 0);\n+\tbpf_map_update_elem(outer_arr_dyn_fd, &key, &map3_fd, 0);\n \tskel->bss->input = 1;\n \tusleep(1);\n-\n \tbpf_map_lookup_elem(map1_fd, &key, &val);\n \tCHECK(val != 1, \"inner1\", \"got %d != exp %d\\n\", val, 1);\n \tbpf_map_lookup_elem(map2_fd, &key, &val);\n \tCHECK(val != 2, \"inner2\", \"got %d != exp %d\\n\", val, 2);\n+\tbpf_map_lookup_elem(map3_fd, &key, &val);\n+\tCHECK(val != 3, \"inner3\", \"got %d != exp %d\\n\", val, 3);\n \n-\t/* inner1 = input + 1, inner2 = input */\n+\t/* inner1 = input, inner2 = input + 1, inner4 = input + 2 */\n \tbpf_map_update_elem(outer_arr_fd, &key, &map2_fd, 0);\n \tbpf_map_update_elem(outer_hash_fd, &key, &map1_fd, 0);\n+\tbpf_map_update_elem(outer_arr_dyn_fd, &key, &map4_fd, 0);\n \tskel->bss->input = 3;\n \tusleep(1);\n-\n \tbpf_map_lookup_elem(map1_fd, &key, &val);\n \tCHECK(val != 4, \"inner1\", \"got %d != exp %d\\n\", val, 4);\n \tbpf_map_lookup_elem(map2_fd, &key, &val);\n \tCHECK(val != 3, \"inner2\", \"got %d != exp %d\\n\", val, 3);\n+\tbpf_map_lookup_elem(map4_fd, &key, &val);\n+\tCHECK(val != 5, \"inner4\", \"got %d != exp %d\\n\", val, 5);\n+\n+\t/* inner5 = input + 2 */\n+\tbpf_map_update_elem(outer_arr_dyn_fd, &key, &map5_fd, 0);\n+\tskel->bss->input = 5;\n+\tusleep(1);\n+\tbpf_map_lookup_elem(map5_fd, &key, &val);\n+\tCHECK(val != 7, \"inner5\", \"got %d != exp %d\\n\", val, 7);\n \n \tfor (i = 0; i < 5; i++) {\n \t\tval = i % 2 ? map1_fd : map2_fd;\n@@ -106,7 +119,13 @@ static void test_lookup_update(void)\n \t\t}\n \t\terr = bpf_map_update_elem(outer_arr_fd, &key, &val, 0);\n \t\tif (CHECK_FAIL(err)) {\n-\t\t\tprintf(\"failed to update hash_of_maps on iter #%d\\n\", i);\n+\t\t\tprintf(\"failed to update array_of_maps on iter #%d\\n\", i);\n+\t\t\tgoto cleanup;\n+\t\t}\n+\t\tval = i % 2 ? map4_fd : map5_fd;\n+\t\terr = bpf_map_update_elem(outer_arr_dyn_fd, &key, &val, 0);\n+\t\tif (CHECK_FAIL(err)) {\n+\t\t\tprintf(\"failed to update array_of_maps (dyn) on iter #%d\\n\", i);\n \t\t\tgoto cleanup;\n \t\t}\n \t}\ndiff --git a/tools/testing/selftests/bpf/progs/test_btf_map_in_map.c b/tools/testing/selftests/bpf/progs/test_btf_map_in_map.c\nindex 193fe0198b21..ccad6f9beabd 100644\n--- a/tools/testing/selftests/bpf/progs/test_btf_map_in_map.c\n+++ b/tools/testing/selftests/bpf/progs/test_btf_map_in_map.c\n@@ -41,6 +41,43 @@ struct outer_arr {\n \t.values = { (void *)&inner_map1, 0, (void *)&inner_map2 },\n };\n \n+struct inner_map_sz3 {\n+\t__uint(type, BPF_MAP_TYPE_ARRAY);\n+\t__uint(map_flags, BPF_F_NO_INLINE);\n+\t__uint(max_entries, 3);\n+\t__type(key, int);\n+\t__type(value, int);\n+} inner_map3 SEC(\".maps\"),\n+  inner_map4 SEC(\".maps\");\n+\n+struct inner_map_sz4 {\n+\t__uint(type, BPF_MAP_TYPE_ARRAY);\n+\t__uint(map_flags, BPF_F_NO_INLINE);\n+\t__uint(max_entries, 5);\n+\t__type(key, int);\n+\t__type(value, int);\n+} inner_map5 SEC(\".maps\");\n+\n+struct outer_arr_dyn {\n+\t__uint(type, BPF_MAP_TYPE_ARRAY_OF_MAPS);\n+\t__uint(max_entries, 3);\n+\t__uint(key_size, sizeof(int));\n+\t__uint(value_size, sizeof(int));\n+\t__array(values, struct {\n+\t\t__uint(type, BPF_MAP_TYPE_ARRAY);\n+\t\t__uint(map_flags, BPF_F_NO_INLINE);\n+\t\t__uint(max_entries, 1);\n+\t\t__type(key, int);\n+\t\t__type(value, int);\n+\t});\n+} outer_arr_dyn SEC(\".maps\") = {\n+\t.values = {\n+\t\t[0] = (void *)&inner_map3,\n+\t\t[1] = (void *)&inner_map4,\n+\t\t[2] = (void *)&inner_map5,\n+\t},\n+};\n+\n struct outer_hash {\n \t__uint(type, BPF_MAP_TYPE_HASH_OF_MAPS);\n \t__uint(max_entries, 5);\n@@ -101,6 +138,12 @@ int handle__sys_enter(void *ctx)\n \tval = input + 1;\n \tbpf_map_update_elem(inner_map, &key, &val, 0);\n \n+\tinner_map = bpf_map_lookup_elem(&outer_arr_dyn, &key);\n+\tif (!inner_map)\n+\t\treturn 1;\n+\tval = input + 2;\n+\tbpf_map_update_elem(inner_map, &key, &val, 0);\n+\n \treturn 0;\n }\n \n", "prefixes": ["bpf-next", "4/6"]}, "patches/11824613/": {"id": 11824613, "url": "https://patchwork.kernel.org/api/1.1/patches/11824613/", "web_url": "https://patchwork.kernel.org/patch/11824613/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<20201008213148.26848-6-daniel@iogearbox.net>", "date": "2020-10-08T21:31:47", "name": "[bpf-next,5/6] bpf, selftests: make redirect_neigh test more extensible", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "545b57eee4a9aafd49cc867a46b1ca500963a149", "submitter": {"id": 123431, "url": "https://patchwork.kernel.org/api/1.1/people/123431/", "name": "Daniel Borkmann", "email": "daniel@iogearbox.net"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11824613/mbox/", "series": [{"id": 361757, "url": "https://patchwork.kernel.org/api/1.1/series/361757/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361757", "date": "2020-10-08T21:31:42", "name": "[bpf-next,1/6] bpf: improve bpf_redirect_neigh helper description", "version": 1, "mbox": "https://patchwork.kernel.org/series/361757/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11824613/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11824613/checks/", "tags": {}, "headers": {"Return-Path": "<SRS0=0bGE=DP=vger.kernel.org=bpf-owner@kernel.org>", "X-Spam-Checker-Version": "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org", "X-Spam-Level": "", "X-Spam-Status": "No, score=-12.7 required=3.0 tests=BAYES_00,\n\tHEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_PATCH,MAILING_LIST_MULTI,SIGNED_OFF_BY,\n\tSPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED,USER_AGENT_GIT autolearn=ham\n\tautolearn_force=no version=3.4.0", "Received": ["from mail.kernel.org (mail.kernel.org [198.145.29.99])\n\tby smtp.lore.kernel.org (Postfix) with ESMTP id 4334FC43467\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 21:32:01 +0000 (UTC)", "from vger.kernel.org (vger.kernel.org [23.128.96.18])\n\tby mail.kernel.org (Postfix) with ESMTP id EE2DF22203\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 21:32:00 +0000 (UTC)", "(majordomo@vger.kernel.org) by vger.kernel.org via listexpand\n        id S1728363AbgJHVb7 (ORCPT <rfc822;bpf@archiver.kernel.org>);\n        Thu, 8 Oct 2020 17:31:59 -0400", "from www62.your-server.de ([213.133.104.62]:46954 \"EHLO\n        www62.your-server.de\" rhost-flags-OK-OK-OK-OK) by vger.kernel.org\n        with ESMTP id S1729317AbgJHVb4 (ORCPT <rfc822;bpf@vger.kernel.org>);\n        Thu, 8 Oct 2020 17:31:56 -0400", "from 75.57.196.178.dynamic.wline.res.cust.swisscom.ch\n ([178.196.57.75] helo=localhost)\n        by www62.your-server.de with esmtpsa\n (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)\n        (Exim 4.89_1)\n        (envelope-from <daniel@iogearbox.net>)\n        id 1kQdVw-0007vG-Fw; Thu, 08 Oct 2020 23:31:52 +0200"], "From": "Daniel Borkmann <daniel@iogearbox.net>", "To": "ast@kernel.org", "Cc": "daniel@iogearbox.net, john.fastabend@gmail.com,\n        netdev@vger.kernel.org, bpf@vger.kernel.org", "Subject": "[PATCH bpf-next 5/6] bpf,\n selftests: make redirect_neigh test more extensible", "Date": "Thu,  8 Oct 2020 23:31:47 +0200", "Message-Id": "<20201008213148.26848-6-daniel@iogearbox.net>", "X-Mailer": "git-send-email 2.21.0", "In-Reply-To": "<20201008213148.26848-1-daniel@iogearbox.net>", "References": "<20201008213148.26848-1-daniel@iogearbox.net>", "MIME-Version": "1.0", "Content-Transfer-Encoding": "8bit", "X-Authenticated-Sender": "daniel@iogearbox.net", "X-Virus-Scanned": "Clear (ClamAV 0.102.4/25951/Thu Oct  8 15:53:03 2020)", "Precedence": "bulk", "List-ID": "<bpf.vger.kernel.org>", "X-Mailing-List": "bpf@vger.kernel.org", "X-Patchwork-Delegate": "bpf@iogearbox.net"}, "content": "Rename into test_tc_redirect.sh and move setup and test code into separate\nfunctions so they can be reused for newly added tests in here. Also remove\nthe crude hack to override ifindex inside the object file via xxd and sed\nand just use a simple map instead. Map given iproute2 does not support BTF\nfully and therefore neither global data at this point.\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\n---\n .../selftests/bpf/progs/test_tc_neigh.c       |  40 ++--\n tools/testing/selftests/bpf/test_tc_neigh.sh  | 168 ---------------\n .../testing/selftests/bpf/test_tc_redirect.sh | 197 ++++++++++++++++++\n 3 files changed, 219 insertions(+), 186 deletions(-)\n delete mode 100755 tools/testing/selftests/bpf/test_tc_neigh.sh\n create mode 100755 tools/testing/selftests/bpf/test_tc_redirect.sh", "diff": "diff --git a/tools/testing/selftests/bpf/progs/test_tc_neigh.c b/tools/testing/selftests/bpf/progs/test_tc_neigh.c\nindex 889a72c3024f..fe182616b112 100644\n--- a/tools/testing/selftests/bpf/progs/test_tc_neigh.c\n+++ b/tools/testing/selftests/bpf/progs/test_tc_neigh.c\n@@ -13,17 +13,10 @@\n #include <bpf/bpf_helpers.h>\n #include <bpf/bpf_endian.h>\n \n-#ifndef barrier_data\n-# define barrier_data(ptr)\tasm volatile(\"\": :\"r\"(ptr) :\"memory\")\n-#endif\n-\n #ifndef ctx_ptr\n # define ctx_ptr(field)\t\t(void *)(long)(field)\n #endif\n \n-#define dst_to_src_tmp\t\t0xeeddddeeU\n-#define src_to_dst_tmp\t\t0xeeffffeeU\n-\n #define ip4_src\t\t\t0xac100164 /* 172.16.1.100 */\n #define ip4_dst\t\t\t0xac100264 /* 172.16.2.100 */\n \n@@ -39,6 +32,18 @@\n \t\t\t\t a.s6_addr32[3] == b.s6_addr32[3])\n #endif\n \n+enum {\n+\tdev_src,\n+\tdev_dst,\n+};\n+\n+struct bpf_map_def SEC(\"maps\") ifindex_map = {\n+\t.type\t\t= BPF_MAP_TYPE_ARRAY,\n+\t.key_size\t= sizeof(int),\n+\t.value_size\t= sizeof(int),\n+\t.max_entries\t= 2,\n+};\n+\n static __always_inline bool is_remote_ep_v4(struct __sk_buff *skb,\n \t\t\t\t\t    __be32 addr)\n {\n@@ -73,7 +78,14 @@ static __always_inline bool is_remote_ep_v6(struct __sk_buff *skb,\n \treturn v6_equal(ip6h->daddr, addr);\n }\n \n-SEC(\"chk_neigh\") int tc_chk(struct __sk_buff *skb)\n+static __always_inline int get_dev_ifindex(int which)\n+{\n+\tint *ifindex = bpf_map_lookup_elem(&ifindex_map, &which);\n+\n+\treturn ifindex ? *ifindex : 0;\n+}\n+\n+SEC(\"chk_egress\") int tc_chk(struct __sk_buff *skb)\n {\n \tvoid *data_end = ctx_ptr(skb->data_end);\n \tvoid *data = ctx_ptr(skb->data);\n@@ -87,7 +99,6 @@ SEC(\"chk_neigh\") int tc_chk(struct __sk_buff *skb)\n \n SEC(\"dst_ingress\") int tc_dst(struct __sk_buff *skb)\n {\n-\tint idx = dst_to_src_tmp;\n \t__u8 zero[ETH_ALEN * 2];\n \tbool redirect = false;\n \n@@ -103,19 +114,15 @@ SEC(\"dst_ingress\") int tc_dst(struct __sk_buff *skb)\n \tif (!redirect)\n \t\treturn TC_ACT_OK;\n \n-\tbarrier_data(&idx);\n-\tidx = bpf_ntohl(idx);\n-\n \t__builtin_memset(&zero, 0, sizeof(zero));\n \tif (bpf_skb_store_bytes(skb, 0, &zero, sizeof(zero), 0) < 0)\n \t\treturn TC_ACT_SHOT;\n \n-\treturn bpf_redirect_neigh(idx, 0);\n+\treturn bpf_redirect_neigh(get_dev_ifindex(dev_src), 0);\n }\n \n SEC(\"src_ingress\") int tc_src(struct __sk_buff *skb)\n {\n-\tint idx = src_to_dst_tmp;\n \t__u8 zero[ETH_ALEN * 2];\n \tbool redirect = false;\n \n@@ -131,14 +138,11 @@ SEC(\"src_ingress\") int tc_src(struct __sk_buff *skb)\n \tif (!redirect)\n \t\treturn TC_ACT_OK;\n \n-\tbarrier_data(&idx);\n-\tidx = bpf_ntohl(idx);\n-\n \t__builtin_memset(&zero, 0, sizeof(zero));\n \tif (bpf_skb_store_bytes(skb, 0, &zero, sizeof(zero), 0) < 0)\n \t\treturn TC_ACT_SHOT;\n \n-\treturn bpf_redirect_neigh(idx, 0);\n+\treturn bpf_redirect_neigh(get_dev_ifindex(dev_dst), 0);\n }\n \n char __license[] SEC(\"license\") = \"GPL\";\ndiff --git a/tools/testing/selftests/bpf/test_tc_neigh.sh b/tools/testing/selftests/bpf/test_tc_neigh.sh\ndeleted file mode 100755\nindex 31d8c3df8b24..000000000000\n--- a/tools/testing/selftests/bpf/test_tc_neigh.sh\n+++ /dev/null\n@@ -1,168 +0,0 @@\n-#!/bin/bash\n-# SPDX-License-Identifier: GPL-2.0\n-#\n-# This test sets up 3 netns (src <-> fwd <-> dst). There is no direct veth link\n-# between src and dst. The netns fwd has veth links to each src and dst. The\n-# client is in src and server in dst. The test installs a TC BPF program to each\n-# host facing veth in fwd which calls into bpf_redirect_peer() to perform the\n-# neigh addr population and redirect; it also installs a dropper prog on the\n-# egress side to drop skbs if neigh addrs were not populated.\n-\n-if [[ $EUID -ne 0 ]]; then\n-\techo \"This script must be run as root\"\n-\techo \"FAIL\"\n-\texit 1\n-fi\n-\n-# check that nc, dd, ping, ping6 and timeout are present\n-command -v nc >/dev/null 2>&1 || \\\n-\t{ echo >&2 \"nc is not available\"; exit 1; }\n-command -v dd >/dev/null 2>&1 || \\\n-\t{ echo >&2 \"dd is not available\"; exit 1; }\n-command -v timeout >/dev/null 2>&1 || \\\n-\t{ echo >&2 \"timeout is not available\"; exit 1; }\n-command -v ping >/dev/null 2>&1 || \\\n-\t{ echo >&2 \"ping is not available\"; exit 1; }\n-command -v ping6 >/dev/null 2>&1 || \\\n-\t{ echo >&2 \"ping6 is not available\"; exit 1; }\n-\n-readonly GREEN='\\033[0;92m'\n-readonly RED='\\033[0;31m'\n-readonly NC='\\033[0m' # No Color\n-\n-readonly PING_ARG=\"-c 3 -w 10 -q\"\n-\n-readonly TIMEOUT=10\n-\n-readonly NS_SRC=\"ns-src-$(mktemp -u XXXXXX)\"\n-readonly NS_FWD=\"ns-fwd-$(mktemp -u XXXXXX)\"\n-readonly NS_DST=\"ns-dst-$(mktemp -u XXXXXX)\"\n-\n-readonly IP4_SRC=\"172.16.1.100\"\n-readonly IP4_DST=\"172.16.2.100\"\n-\n-readonly IP6_SRC=\"::1:dead:beef:cafe\"\n-readonly IP6_DST=\"::2:dead:beef:cafe\"\n-\n-readonly IP4_SLL=\"169.254.0.1\"\n-readonly IP4_DLL=\"169.254.0.2\"\n-readonly IP4_NET=\"169.254.0.0\"\n-\n-cleanup()\n-{\n-\tip netns del ${NS_SRC}\n-\tip netns del ${NS_FWD}\n-\tip netns del ${NS_DST}\n-}\n-\n-trap cleanup EXIT\n-\n-set -e\n-\n-ip netns add \"${NS_SRC}\"\n-ip netns add \"${NS_FWD}\"\n-ip netns add \"${NS_DST}\"\n-\n-ip link add veth_src type veth peer name veth_src_fwd\n-ip link add veth_dst type veth peer name veth_dst_fwd\n-\n-ip link set veth_src netns ${NS_SRC}\n-ip link set veth_src_fwd netns ${NS_FWD}\n-\n-ip link set veth_dst netns ${NS_DST}\n-ip link set veth_dst_fwd netns ${NS_FWD}\n-\n-ip -netns ${NS_SRC} addr add ${IP4_SRC}/32 dev veth_src\n-ip -netns ${NS_DST} addr add ${IP4_DST}/32 dev veth_dst\n-\n-# The fwd netns automatically get a v6 LL address / routes, but also needs v4\n-# one in order to start ARP probing. IP4_NET route is added to the endpoints\n-# so that the ARP processing will reply.\n-\n-ip -netns ${NS_FWD} addr add ${IP4_SLL}/32 dev veth_src_fwd\n-ip -netns ${NS_FWD} addr add ${IP4_DLL}/32 dev veth_dst_fwd\n-\n-ip -netns ${NS_SRC} addr add ${IP6_SRC}/128 dev veth_src nodad\n-ip -netns ${NS_DST} addr add ${IP6_DST}/128 dev veth_dst nodad\n-\n-ip -netns ${NS_SRC} link set dev veth_src up\n-ip -netns ${NS_FWD} link set dev veth_src_fwd up\n-\n-ip -netns ${NS_DST} link set dev veth_dst up\n-ip -netns ${NS_FWD} link set dev veth_dst_fwd up\n-\n-ip -netns ${NS_SRC} route add ${IP4_DST}/32 dev veth_src scope global\n-ip -netns ${NS_SRC} route add ${IP4_NET}/16 dev veth_src scope global\n-ip -netns ${NS_FWD} route add ${IP4_SRC}/32 dev veth_src_fwd scope global\n-\n-ip -netns ${NS_SRC} route add ${IP6_DST}/128 dev veth_src scope global\n-ip -netns ${NS_FWD} route add ${IP6_SRC}/128 dev veth_src_fwd scope global\n-\n-ip -netns ${NS_DST} route add ${IP4_SRC}/32 dev veth_dst scope global\n-ip -netns ${NS_DST} route add ${IP4_NET}/16 dev veth_dst scope global\n-ip -netns ${NS_FWD} route add ${IP4_DST}/32 dev veth_dst_fwd scope global\n-\n-ip -netns ${NS_DST} route add ${IP6_SRC}/128 dev veth_dst scope global\n-ip -netns ${NS_FWD} route add ${IP6_DST}/128 dev veth_dst_fwd scope global\n-\n-fmac_src=$(ip netns exec ${NS_FWD} cat /sys/class/net/veth_src_fwd/address)\n-fmac_dst=$(ip netns exec ${NS_FWD} cat /sys/class/net/veth_dst_fwd/address)\n-\n-ip -netns ${NS_SRC} neigh add ${IP4_DST} dev veth_src lladdr $fmac_src\n-ip -netns ${NS_DST} neigh add ${IP4_SRC} dev veth_dst lladdr $fmac_dst\n-\n-ip -netns ${NS_SRC} neigh add ${IP6_DST} dev veth_src lladdr $fmac_src\n-ip -netns ${NS_DST} neigh add ${IP6_SRC} dev veth_dst lladdr $fmac_dst\n-\n-veth_dst=$(ip netns exec ${NS_FWD} cat /sys/class/net/veth_dst_fwd/ifindex | awk '{printf \"%08x\\n\", $1}')\n-veth_src=$(ip netns exec ${NS_FWD} cat /sys/class/net/veth_src_fwd/ifindex | awk '{printf \"%08x\\n\", $1}')\n-\n-xxd -p < test_tc_neigh.o   | sed \"s/eeddddee/$veth_src/g\" | xxd -r -p > test_tc_neigh.x.o\n-xxd -p < test_tc_neigh.x.o | sed \"s/eeffffee/$veth_dst/g\" | xxd -r -p > test_tc_neigh.y.o\n-\n-ip netns exec ${NS_FWD} tc qdisc add dev veth_src_fwd clsact\n-ip netns exec ${NS_FWD} tc filter add dev veth_src_fwd ingress bpf da obj test_tc_neigh.y.o sec src_ingress\n-ip netns exec ${NS_FWD} tc filter add dev veth_src_fwd egress  bpf da obj test_tc_neigh.y.o sec chk_neigh\n-\n-ip netns exec ${NS_FWD} tc qdisc add dev veth_dst_fwd clsact\n-ip netns exec ${NS_FWD} tc filter add dev veth_dst_fwd ingress bpf da obj test_tc_neigh.y.o sec dst_ingress\n-ip netns exec ${NS_FWD} tc filter add dev veth_dst_fwd egress  bpf da obj test_tc_neigh.y.o sec chk_neigh\n-\n-rm -f test_tc_neigh.x.o test_tc_neigh.y.o\n-\n-ip netns exec ${NS_DST} bash -c \"nc -4 -l -p 9004 &\"\n-ip netns exec ${NS_DST} bash -c \"nc -6 -l -p 9006 &\"\n-\n-set +e\n-\n-TEST=\"TCPv4 connectivity test\"\n-ip netns exec ${NS_SRC} bash -c \"timeout ${TIMEOUT} dd if=/dev/zero bs=1000 count=100 > /dev/tcp/${IP4_DST}/9004\"\n-if [ $? -ne 0 ]; then\n-\techo -e \"${TEST}: ${RED}FAIL${NC}\"\n-\texit 1\n-fi\n-echo -e \"${TEST}: ${GREEN}PASS${NC}\"\n-\n-TEST=\"TCPv6 connectivity test\"\n-ip netns exec ${NS_SRC} bash -c \"timeout ${TIMEOUT} dd if=/dev/zero bs=1000 count=100 > /dev/tcp/${IP6_DST}/9006\"\n-if [ $? -ne 0 ]; then\n-\techo -e \"${TEST}: ${RED}FAIL${NC}\"\n-\texit 1\n-fi\n-echo -e \"${TEST}: ${GREEN}PASS${NC}\"\n-\n-TEST=\"ICMPv4 connectivity test\"\n-ip netns exec ${NS_SRC} ping  $PING_ARG ${IP4_DST}\n-if [ $? -ne 0 ]; then\n-\techo -e \"${TEST}: ${RED}FAIL${NC}\"\n-\texit 1\n-fi\n-echo -e \"${TEST}: ${GREEN}PASS${NC}\"\n-\n-TEST=\"ICMPv6 connectivity test\"\n-ip netns exec ${NS_SRC} ping6 $PING_ARG ${IP6_DST}\n-if [ $? -ne 0 ]; then\n-\techo -e \"${TEST}: ${RED}FAIL${NC}\"\n-\texit 1\n-fi\n-echo -e \"${TEST}: ${GREEN}PASS${NC}\"\ndiff --git a/tools/testing/selftests/bpf/test_tc_redirect.sh b/tools/testing/selftests/bpf/test_tc_redirect.sh\nnew file mode 100755\nindex 000000000000..6ad441405132\n--- /dev/null\n+++ b/tools/testing/selftests/bpf/test_tc_redirect.sh\n@@ -0,0 +1,197 @@\n+#!/bin/bash\n+# SPDX-License-Identifier: GPL-2.0\n+#\n+# This test sets up 3 netns (src <-> fwd <-> dst). There is no direct veth link\n+# between src and dst. The netns fwd has veth links to each src and dst. The\n+# client is in src and server in dst. The test installs a TC BPF program to each\n+# host facing veth in fwd which calls into bpf_redirect_peer() to perform the\n+# neigh addr population and redirect; it also installs a dropper prog on the\n+# egress side to drop skbs if neigh addrs were not populated.\n+\n+if [[ $EUID -ne 0 ]]; then\n+\techo \"This script must be run as root\"\n+\techo \"FAIL\"\n+\texit 1\n+fi\n+\n+# check that needed tools are present\n+command -v nc >/dev/null 2>&1 || \\\n+\t{ echo >&2 \"nc is not available\"; exit 1; }\n+command -v dd >/dev/null 2>&1 || \\\n+\t{ echo >&2 \"dd is not available\"; exit 1; }\n+command -v timeout >/dev/null 2>&1 || \\\n+\t{ echo >&2 \"timeout is not available\"; exit 1; }\n+command -v ping >/dev/null 2>&1 || \\\n+\t{ echo >&2 \"ping is not available\"; exit 1; }\n+command -v ping6 >/dev/null 2>&1 || \\\n+\t{ echo >&2 \"ping6 is not available\"; exit 1; }\n+command -v perl >/dev/null 2>&1 || \\\n+\t{ echo >&2 \"perl is not available\"; exit 1; }\n+command -v jq >/dev/null 2>&1 || \\\n+\t{ echo >&2 \"jq is not available\"; exit 1; }\n+command -v bpftool >/dev/null 2>&1 || \\\n+\t{ echo >&2 \"bpftool is not available\"; exit 1; }\n+\n+readonly GREEN='\\033[0;92m'\n+readonly RED='\\033[0;31m'\n+readonly NC='\\033[0m' # No Color\n+\n+readonly PING_ARG=\"-c 3 -w 10 -q\"\n+\n+readonly TIMEOUT=10\n+\n+readonly NS_SRC=\"ns-src-$(mktemp -u XXXXXX)\"\n+readonly NS_FWD=\"ns-fwd-$(mktemp -u XXXXXX)\"\n+readonly NS_DST=\"ns-dst-$(mktemp -u XXXXXX)\"\n+\n+readonly IP4_SRC=\"172.16.1.100\"\n+readonly IP4_DST=\"172.16.2.100\"\n+\n+readonly IP6_SRC=\"::1:dead:beef:cafe\"\n+readonly IP6_DST=\"::2:dead:beef:cafe\"\n+\n+readonly IP4_SLL=\"169.254.0.1\"\n+readonly IP4_DLL=\"169.254.0.2\"\n+readonly IP4_NET=\"169.254.0.0\"\n+\n+netns_cleanup()\n+{\n+\tip netns del ${NS_SRC}\n+\tip netns del ${NS_FWD}\n+\tip netns del ${NS_DST}\n+}\n+\n+netns_setup()\n+{\n+\tip netns add \"${NS_SRC}\"\n+\tip netns add \"${NS_FWD}\"\n+\tip netns add \"${NS_DST}\"\n+\n+\tip link add veth_src type veth peer name veth_src_fwd\n+\tip link add veth_dst type veth peer name veth_dst_fwd\n+\n+\tip link set veth_src netns ${NS_SRC}\n+\tip link set veth_src_fwd netns ${NS_FWD}\n+\n+\tip link set veth_dst netns ${NS_DST}\n+\tip link set veth_dst_fwd netns ${NS_FWD}\n+\n+\tip -netns ${NS_SRC} addr add ${IP4_SRC}/32 dev veth_src\n+\tip -netns ${NS_DST} addr add ${IP4_DST}/32 dev veth_dst\n+\n+\t# The fwd netns automatically get a v6 LL address / routes, but also\n+\t# needs v4 one in order to start ARP probing. IP4_NET route is added\n+\t# to the endpoints so that the ARP processing will reply.\n+\n+\tip -netns ${NS_FWD} addr add ${IP4_SLL}/32 dev veth_src_fwd\n+\tip -netns ${NS_FWD} addr add ${IP4_DLL}/32 dev veth_dst_fwd\n+\n+\tip -netns ${NS_SRC} addr add ${IP6_SRC}/128 dev veth_src nodad\n+\tip -netns ${NS_DST} addr add ${IP6_DST}/128 dev veth_dst nodad\n+\n+\tip -netns ${NS_SRC} link set dev veth_src up\n+\tip -netns ${NS_FWD} link set dev veth_src_fwd up\n+\n+\tip -netns ${NS_DST} link set dev veth_dst up\n+\tip -netns ${NS_FWD} link set dev veth_dst_fwd up\n+\n+\tip -netns ${NS_SRC} route add ${IP4_DST}/32 dev veth_src scope global\n+\tip -netns ${NS_SRC} route add ${IP4_NET}/16 dev veth_src scope global\n+\tip -netns ${NS_FWD} route add ${IP4_SRC}/32 dev veth_src_fwd scope global\n+\n+\tip -netns ${NS_SRC} route add ${IP6_DST}/128 dev veth_src scope global\n+\tip -netns ${NS_FWD} route add ${IP6_SRC}/128 dev veth_src_fwd scope global\n+\n+\tip -netns ${NS_DST} route add ${IP4_SRC}/32 dev veth_dst scope global\n+\tip -netns ${NS_DST} route add ${IP4_NET}/16 dev veth_dst scope global\n+\tip -netns ${NS_FWD} route add ${IP4_DST}/32 dev veth_dst_fwd scope global\n+\n+\tip -netns ${NS_DST} route add ${IP6_SRC}/128 dev veth_dst scope global\n+\tip -netns ${NS_FWD} route add ${IP6_DST}/128 dev veth_dst_fwd scope global\n+\n+\tfmac_src=$(ip netns exec ${NS_FWD} cat /sys/class/net/veth_src_fwd/address)\n+\tfmac_dst=$(ip netns exec ${NS_FWD} cat /sys/class/net/veth_dst_fwd/address)\n+\n+\tip -netns ${NS_SRC} neigh add ${IP4_DST} dev veth_src lladdr $fmac_src\n+\tip -netns ${NS_DST} neigh add ${IP4_SRC} dev veth_dst lladdr $fmac_dst\n+\n+\tip -netns ${NS_SRC} neigh add ${IP6_DST} dev veth_src lladdr $fmac_src\n+\tip -netns ${NS_DST} neigh add ${IP6_SRC} dev veth_dst lladdr $fmac_dst\n+}\n+\n+netns_test_connectivity()\n+{\n+\tset +e\n+\n+\tip netns exec ${NS_DST} bash -c \"nc -4 -l -p 9004 &\"\n+\tip netns exec ${NS_DST} bash -c \"nc -6 -l -p 9006 &\"\n+\n+\tTEST=\"TCPv4 connectivity test\"\n+\tip netns exec ${NS_SRC} bash -c \"timeout ${TIMEOUT} dd if=/dev/zero bs=1000 count=100 > /dev/tcp/${IP4_DST}/9004\"\n+\tif [ $? -ne 0 ]; then\n+\t\techo -e \"${TEST}: ${RED}FAIL${NC}\"\n+\t\texit 1\n+\tfi\n+\techo -e \"${TEST}: ${GREEN}PASS${NC}\"\n+\n+\tTEST=\"TCPv6 connectivity test\"\n+\tip netns exec ${NS_SRC} bash -c \"timeout ${TIMEOUT} dd if=/dev/zero bs=1000 count=100 > /dev/tcp/${IP6_DST}/9006\"\n+\tif [ $? -ne 0 ]; then\n+\t\techo -e \"${TEST}: ${RED}FAIL${NC}\"\n+\t\texit 1\n+\tfi\n+\techo -e \"${TEST}: ${GREEN}PASS${NC}\"\n+\n+\tTEST=\"ICMPv4 connectivity test\"\n+\tip netns exec ${NS_SRC} ping  $PING_ARG ${IP4_DST}\n+\tif [ $? -ne 0 ]; then\n+\t\techo -e \"${TEST}: ${RED}FAIL${NC}\"\n+\t\texit 1\n+\tfi\n+\techo -e \"${TEST}: ${GREEN}PASS${NC}\"\n+\n+\tTEST=\"ICMPv6 connectivity test\"\n+\tip netns exec ${NS_SRC} ping6 $PING_ARG ${IP6_DST}\n+\tif [ $? -ne 0 ]; then\n+\t\techo -e \"${TEST}: ${RED}FAIL${NC}\"\n+\t\texit 1\n+\tfi\n+\techo -e \"${TEST}: ${GREEN}PASS${NC}\"\n+\n+\tset -e\n+}\n+\n+hex_mem_str()\n+{\n+\tperl -e 'print join(\" \", unpack(\"(H2)8\", pack(\"L\", @ARGV)))' $1\n+}\n+\n+netns_setup_neigh()\n+{\n+\tip netns exec ${NS_FWD} tc qdisc add dev veth_src_fwd clsact\n+\tip netns exec ${NS_FWD} tc filter add dev veth_src_fwd ingress bpf da obj test_tc_neigh.o sec src_ingress\n+\tip netns exec ${NS_FWD} tc filter add dev veth_src_fwd egress  bpf da obj test_tc_neigh.o sec chk_egress\n+\n+\tip netns exec ${NS_FWD} tc qdisc add dev veth_dst_fwd clsact\n+\tip netns exec ${NS_FWD} tc filter add dev veth_dst_fwd ingress bpf da obj test_tc_neigh.o sec dst_ingress\n+\tip netns exec ${NS_FWD} tc filter add dev veth_dst_fwd egress  bpf da obj test_tc_neigh.o sec chk_egress\n+\n+\tveth_src=$(ip netns exec ${NS_FWD} cat /sys/class/net/veth_src_fwd/ifindex)\n+\tveth_dst=$(ip netns exec ${NS_FWD} cat /sys/class/net/veth_dst_fwd/ifindex)\n+\n+\tprogs=$(ip netns exec ${NS_FWD} bpftool net --json | jq -r '.[] | .tc | map(.id) | .[]')\n+\tfor prog in $progs; do\n+\t\tmap=$(bpftool prog show id $prog --json | jq -r '.map_ids | .? | .[]')\n+\t\tif [ ! -z \"$map\" ]; then\n+\t\t\tbpftool map update id $map key hex $(hex_mem_str 0) value hex $(hex_mem_str $veth_src)\n+\t\t\tbpftool map update id $map key hex $(hex_mem_str 1) value hex $(hex_mem_str $veth_dst)\n+\t\tfi\n+\tdone\n+}\n+\n+trap netns_cleanup EXIT\n+set -e\n+\n+netns_setup\n+netns_setup_neigh\n+netns_test_connectivity\n", "prefixes": ["bpf-next", "5/6"]}, "patches/11824615/": {"id": 11824615, "url": "https://patchwork.kernel.org/api/1.1/patches/11824615/", "web_url": "https://patchwork.kernel.org/patch/11824615/", "project": {"id": 399, "url": "https://patchwork.kernel.org/api/1.1/projects/399/", "name": "Netdev + BPF", "link_name": "netdevbpf", "list_id": "bpf.vger.kernel.org", "list_email": "bpf@vger.kernel.org", "web_url": "", "scm_url": "", "webscm_url": ""}, "msgid": "<20201008213148.26848-7-daniel@iogearbox.net>", "date": "2020-10-08T21:31:48", "name": "[bpf-next,6/6] bpf, selftests: add redirect_peer selftest", "commit_ref": null, "pull_url": null, "state": "new", "archived": false, "hash": "385b65411b3cc936e7fcdeaec16ea5dc93b5491c", "submitter": {"id": 123431, "url": "https://patchwork.kernel.org/api/1.1/people/123431/", "name": "Daniel Borkmann", "email": "daniel@iogearbox.net"}, "delegate": {"id": 121173, "url": "https://patchwork.kernel.org/api/1.1/users/121173/", "username": "bpf", "first_name": "BPF", "last_name": "", "email": "bpf@iogearbox.net"}, "mbox": "https://patchwork.kernel.org/patch/11824615/mbox/", "series": [{"id": 361757, "url": "https://patchwork.kernel.org/api/1.1/series/361757/", "web_url": "https://patchwork.kernel.org/project/netdevbpf/list/?series=361757", "date": "2020-10-08T21:31:42", "name": "[bpf-next,1/6] bpf: improve bpf_redirect_neigh helper description", "version": 1, "mbox": "https://patchwork.kernel.org/series/361757/mbox/"}], "comments": "https://patchwork.kernel.org/api/patches/11824615/comments/", "check": "pending", "checks": "https://patchwork.kernel.org/api/patches/11824615/checks/", "tags": {}, "headers": {"Return-Path": "<SRS0=0bGE=DP=vger.kernel.org=bpf-owner@kernel.org>", "X-Spam-Checker-Version": "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org", "X-Spam-Level": "", "X-Spam-Status": "No, score=-12.7 required=3.0 tests=BAYES_00,\n\tHEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_PATCH,MAILING_LIST_MULTI,SIGNED_OFF_BY,\n\tSPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED,USER_AGENT_GIT autolearn=ham\n\tautolearn_force=no version=3.4.0", "Received": ["from mail.kernel.org (mail.kernel.org [198.145.29.99])\n\tby smtp.lore.kernel.org (Postfix) with ESMTP id 6F604C433DF\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 21:32:04 +0000 (UTC)", "from vger.kernel.org (vger.kernel.org [23.128.96.18])\n\tby mail.kernel.org (Postfix) with ESMTP id 29E9122203\n\tfor <bpf@archiver.kernel.org>; Thu,  8 Oct 2020 21:32:04 +0000 (UTC)", "(majordomo@vger.kernel.org) by vger.kernel.org via listexpand\n        id S1729317AbgJHVcD (ORCPT <rfc822;bpf@archiver.kernel.org>);\n        Thu, 8 Oct 2020 17:32:03 -0400", "from www62.your-server.de ([213.133.104.62]:46960 \"EHLO\n        www62.your-server.de\" rhost-flags-OK-OK-OK-OK) by vger.kernel.org\n        with ESMTP id S1729338AbgJHVbz (ORCPT <rfc822;bpf@vger.kernel.org>);\n        Thu, 8 Oct 2020 17:31:55 -0400", "from 75.57.196.178.dynamic.wline.res.cust.swisscom.ch\n ([178.196.57.75] helo=localhost)\n        by www62.your-server.de with esmtpsa\n (TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256)\n        (Exim 4.89_1)\n        (envelope-from <daniel@iogearbox.net>)\n        id 1kQdVw-0007vO-UN; Thu, 08 Oct 2020 23:31:53 +0200"], "From": "Daniel Borkmann <daniel@iogearbox.net>", "To": "ast@kernel.org", "Cc": "daniel@iogearbox.net, john.fastabend@gmail.com,\n        netdev@vger.kernel.org, bpf@vger.kernel.org", "Subject": "[PATCH bpf-next 6/6] bpf, selftests: add redirect_peer selftest", "Date": "Thu,  8 Oct 2020 23:31:48 +0200", "Message-Id": "<20201008213148.26848-7-daniel@iogearbox.net>", "X-Mailer": "git-send-email 2.21.0", "In-Reply-To": "<20201008213148.26848-1-daniel@iogearbox.net>", "References": "<20201008213148.26848-1-daniel@iogearbox.net>", "MIME-Version": "1.0", "Content-Transfer-Encoding": "8bit", "X-Authenticated-Sender": "daniel@iogearbox.net", "X-Virus-Scanned": "Clear (ClamAV 0.102.4/25951/Thu Oct  8 15:53:03 2020)", "Precedence": "bulk", "List-ID": "<bpf.vger.kernel.org>", "X-Mailing-List": "bpf@vger.kernel.org", "X-Patchwork-Delegate": "bpf@iogearbox.net"}, "content": "Extend the test_tc_redirect test and add a small test that exercises the new\nredirect_peer() helper for the IPv4 and IPv6 case.\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\n---\n .../selftests/bpf/progs/test_tc_peer.c        | 45 +++++++++++++++++++\n .../testing/selftests/bpf/test_tc_redirect.sh | 25 +++++++----\n 2 files changed, 61 insertions(+), 9 deletions(-)\n create mode 100644 tools/testing/selftests/bpf/progs/test_tc_peer.c", "diff": "diff --git a/tools/testing/selftests/bpf/progs/test_tc_peer.c b/tools/testing/selftests/bpf/progs/test_tc_peer.c\nnew file mode 100644\nindex 000000000000..fc84a7685aa2\n--- /dev/null\n+++ b/tools/testing/selftests/bpf/progs/test_tc_peer.c\n@@ -0,0 +1,45 @@\n+// SPDX-License-Identifier: GPL-2.0\n+#include <stdint.h>\n+#include <stdbool.h>\n+\n+#include <linux/bpf.h>\n+#include <linux/stddef.h>\n+#include <linux/pkt_cls.h>\n+\n+#include <bpf/bpf_helpers.h>\n+\n+enum {\n+\tdev_src,\n+\tdev_dst,\n+};\n+\n+struct bpf_map_def SEC(\"maps\") ifindex_map = {\n+\t.type\t\t= BPF_MAP_TYPE_ARRAY,\n+\t.key_size\t= sizeof(int),\n+\t.value_size\t= sizeof(int),\n+\t.max_entries\t= 2,\n+};\n+\n+static __always_inline int get_dev_ifindex(int which)\n+{\n+\tint *ifindex = bpf_map_lookup_elem(&ifindex_map, &which);\n+\n+\treturn ifindex ? *ifindex : 0;\n+}\n+\n+SEC(\"chk_egress\") int tc_chk(struct __sk_buff *skb)\n+{\n+\treturn TC_ACT_SHOT;\n+}\n+\n+SEC(\"dst_ingress\") int tc_dst(struct __sk_buff *skb)\n+{\n+\treturn bpf_redirect_peer(get_dev_ifindex(dev_src), 0);\n+}\n+\n+SEC(\"src_ingress\") int tc_src(struct __sk_buff *skb)\n+{\n+\treturn bpf_redirect_peer(get_dev_ifindex(dev_dst), 0);\n+}\n+\n+char __license[] SEC(\"license\") = \"GPL\";\ndiff --git a/tools/testing/selftests/bpf/test_tc_redirect.sh b/tools/testing/selftests/bpf/test_tc_redirect.sh\nindex 6ad441405132..6d7482562140 100755\n--- a/tools/testing/selftests/bpf/test_tc_redirect.sh\n+++ b/tools/testing/selftests/bpf/test_tc_redirect.sh\n@@ -4,9 +4,10 @@\n # This test sets up 3 netns (src <-> fwd <-> dst). There is no direct veth link\n # between src and dst. The netns fwd has veth links to each src and dst. The\n # client is in src and server in dst. The test installs a TC BPF program to each\n-# host facing veth in fwd which calls into bpf_redirect_peer() to perform the\n-# neigh addr population and redirect; it also installs a dropper prog on the\n-# egress side to drop skbs if neigh addrs were not populated.\n+# host facing veth in fwd which calls into i) bpf_redirect_neigh() to perform the\n+# neigh addr population and redirect or ii) bpf_redirect_peer() for namespace\n+# switch from ingress side; it also installs a checker prog on the egress side\n+# to drop unexpected traffic.\n \n if [[ $EUID -ne 0 ]]; then\n \techo \"This script must be run as root\"\n@@ -166,15 +167,17 @@ hex_mem_str()\n \tperl -e 'print join(\" \", unpack(\"(H2)8\", pack(\"L\", @ARGV)))' $1\n }\n \n-netns_setup_neigh()\n+netns_setup_bpf()\n {\n+\tlocal obj=$1\n+\n \tip netns exec ${NS_FWD} tc qdisc add dev veth_src_fwd clsact\n-\tip netns exec ${NS_FWD} tc filter add dev veth_src_fwd ingress bpf da obj test_tc_neigh.o sec src_ingress\n-\tip netns exec ${NS_FWD} tc filter add dev veth_src_fwd egress  bpf da obj test_tc_neigh.o sec chk_egress\n+\tip netns exec ${NS_FWD} tc filter add dev veth_src_fwd ingress bpf da obj $obj sec src_ingress\n+\tip netns exec ${NS_FWD} tc filter add dev veth_src_fwd egress  bpf da obj $obj sec chk_egress\n \n \tip netns exec ${NS_FWD} tc qdisc add dev veth_dst_fwd clsact\n-\tip netns exec ${NS_FWD} tc filter add dev veth_dst_fwd ingress bpf da obj test_tc_neigh.o sec dst_ingress\n-\tip netns exec ${NS_FWD} tc filter add dev veth_dst_fwd egress  bpf da obj test_tc_neigh.o sec chk_egress\n+\tip netns exec ${NS_FWD} tc filter add dev veth_dst_fwd ingress bpf da obj $obj sec dst_ingress\n+\tip netns exec ${NS_FWD} tc filter add dev veth_dst_fwd egress  bpf da obj $obj sec chk_egress\n \n \tveth_src=$(ip netns exec ${NS_FWD} cat /sys/class/net/veth_src_fwd/ifindex)\n \tveth_dst=$(ip netns exec ${NS_FWD} cat /sys/class/net/veth_dst_fwd/ifindex)\n@@ -193,5 +196,9 @@ trap netns_cleanup EXIT\n set -e\n \n netns_setup\n-netns_setup_neigh\n+netns_setup_bpf test_tc_neigh.o\n+netns_test_connectivity\n+netns_cleanup\n+netns_setup\n+netns_setup_bpf test_tc_peer.o\n netns_test_connectivity\n", "prefixes": ["bpf-next", "6/6"]}}